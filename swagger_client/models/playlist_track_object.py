# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlaylistTrackObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added_at': 'datetime',
        'added_by': 'AllOfPlaylistTrackObjectAddedBy',
        'is_local': 'bool',
        'track': 'OneOfPlaylistTrackObjectTrack'
    }

    attribute_map = {
        'added_at': 'added_at',
        'added_by': 'added_by',
        'is_local': 'is_local',
        'track': 'track'
    }

    def __init__(self, added_at=None, added_by=None, is_local=None, track=None):  # noqa: E501
        """PlaylistTrackObject - a model defined in Swagger"""  # noqa: E501
        self._added_at = None
        self._added_by = None
        self._is_local = None
        self._track = None
        self.discriminator = None
        if added_at is not None:
            self.added_at = added_at
        if added_by is not None:
            self.added_by = added_by
        if is_local is not None:
            self.is_local = is_local
        if track is not None:
            self.track = track

    @property
    def added_at(self):
        """Gets the added_at of this PlaylistTrackObject.  # noqa: E501

        The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._   # noqa: E501

        :return: The added_at of this PlaylistTrackObject.  # noqa: E501
        :rtype: datetime
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this PlaylistTrackObject.

        The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._   # noqa: E501

        :param added_at: The added_at of this PlaylistTrackObject.  # noqa: E501
        :type: datetime
        """

        self._added_at = added_at

    @property
    def added_by(self):
        """Gets the added_by of this PlaylistTrackObject.  # noqa: E501

        The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._   # noqa: E501

        :return: The added_by of this PlaylistTrackObject.  # noqa: E501
        :rtype: AllOfPlaylistTrackObjectAddedBy
        """
        return self._added_by

    @added_by.setter
    def added_by(self, added_by):
        """Sets the added_by of this PlaylistTrackObject.

        The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._   # noqa: E501

        :param added_by: The added_by of this PlaylistTrackObject.  # noqa: E501
        :type: AllOfPlaylistTrackObjectAddedBy
        """

        self._added_by = added_by

    @property
    def is_local(self):
        """Gets the is_local of this PlaylistTrackObject.  # noqa: E501

        Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.   # noqa: E501

        :return: The is_local of this PlaylistTrackObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this PlaylistTrackObject.

        Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.   # noqa: E501

        :param is_local: The is_local of this PlaylistTrackObject.  # noqa: E501
        :type: bool
        """

        self._is_local = is_local

    @property
    def track(self):
        """Gets the track of this PlaylistTrackObject.  # noqa: E501

        Information about the track or episode.  # noqa: E501

        :return: The track of this PlaylistTrackObject.  # noqa: E501
        :rtype: OneOfPlaylistTrackObjectTrack
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this PlaylistTrackObject.

        Information about the track or episode.  # noqa: E501

        :param track: The track of this PlaylistTrackObject.  # noqa: E501
        :type: OneOfPlaylistTrackObjectTrack
        """

        self._track = track

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlaylistTrackObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlaylistTrackObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
