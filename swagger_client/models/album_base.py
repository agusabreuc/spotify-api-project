# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlbumBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'album_type': 'str',
        'total_tracks': 'int',
        'available_markets': 'list[str]',
        'external_urls': 'AllOfAlbumBaseExternalUrls',
        'href': 'str',
        'id': 'str',
        'images': 'list[ImageObject]',
        'name': 'str',
        'release_date': 'str',
        'release_date_precision': 'str',
        'restrictions': 'AllOfAlbumBaseRestrictions',
        'type': 'str',
        'uri': 'str',
        'copyrights': 'list[CopyrightObject]',
        'external_ids': 'AllOfAlbumBaseExternalIds',
        'genres': 'list[str]',
        'label': 'str',
        'popularity': 'int'
    }

    attribute_map = {
        'album_type': 'album_type',
        'total_tracks': 'total_tracks',
        'available_markets': 'available_markets',
        'external_urls': 'external_urls',
        'href': 'href',
        'id': 'id',
        'images': 'images',
        'name': 'name',
        'release_date': 'release_date',
        'release_date_precision': 'release_date_precision',
        'restrictions': 'restrictions',
        'type': 'type',
        'uri': 'uri',
        'copyrights': 'copyrights',
        'external_ids': 'external_ids',
        'genres': 'genres',
        'label': 'label',
        'popularity': 'popularity'
    }

    def __init__(self, album_type=None, total_tracks=None, available_markets=None, external_urls=None, href=None, id=None, images=None, name=None, release_date=None, release_date_precision=None, restrictions=None, type=None, uri=None, copyrights=None, external_ids=None, genres=None, label=None, popularity=None):  # noqa: E501
        """AlbumBase - a model defined in Swagger"""  # noqa: E501
        self._album_type = None
        self._total_tracks = None
        self._available_markets = None
        self._external_urls = None
        self._href = None
        self._id = None
        self._images = None
        self._name = None
        self._release_date = None
        self._release_date_precision = None
        self._restrictions = None
        self._type = None
        self._uri = None
        self._copyrights = None
        self._external_ids = None
        self._genres = None
        self._label = None
        self._popularity = None
        self.discriminator = None
        self.album_type = album_type
        self.total_tracks = total_tracks
        self.available_markets = available_markets
        self.external_urls = external_urls
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.release_date = release_date
        self.release_date_precision = release_date_precision
        if restrictions is not None:
            self.restrictions = restrictions
        self.type = type
        self.uri = uri
        if copyrights is not None:
            self.copyrights = copyrights
        if external_ids is not None:
            self.external_ids = external_ids
        if genres is not None:
            self.genres = genres
        if label is not None:
            self.label = label
        if popularity is not None:
            self.popularity = popularity

    @property
    def album_type(self):
        """Gets the album_type of this AlbumBase.  # noqa: E501

        The type of the album.   # noqa: E501

        :return: The album_type of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._album_type

    @album_type.setter
    def album_type(self, album_type):
        """Sets the album_type of this AlbumBase.

        The type of the album.   # noqa: E501

        :param album_type: The album_type of this AlbumBase.  # noqa: E501
        :type: str
        """
        if album_type is None:
            raise ValueError("Invalid value for `album_type`, must not be `None`")  # noqa: E501
        allowed_values = ["album", "single", "compilation"]  # noqa: E501
        if album_type not in allowed_values:
            raise ValueError(
                "Invalid value for `album_type` ({0}), must be one of {1}"  # noqa: E501
                .format(album_type, allowed_values)
            )

        self._album_type = album_type

    @property
    def total_tracks(self):
        """Gets the total_tracks of this AlbumBase.  # noqa: E501

        The number of tracks in the album.  # noqa: E501

        :return: The total_tracks of this AlbumBase.  # noqa: E501
        :rtype: int
        """
        return self._total_tracks

    @total_tracks.setter
    def total_tracks(self, total_tracks):
        """Sets the total_tracks of this AlbumBase.

        The number of tracks in the album.  # noqa: E501

        :param total_tracks: The total_tracks of this AlbumBase.  # noqa: E501
        :type: int
        """
        if total_tracks is None:
            raise ValueError("Invalid value for `total_tracks`, must not be `None`")  # noqa: E501

        self._total_tracks = total_tracks

    @property
    def available_markets(self):
        """Gets the available_markets of this AlbumBase.  # noqa: E501

        The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._   # noqa: E501

        :return: The available_markets of this AlbumBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this AlbumBase.

        The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._   # noqa: E501

        :param available_markets: The available_markets of this AlbumBase.  # noqa: E501
        :type: list[str]
        """
        if available_markets is None:
            raise ValueError("Invalid value for `available_markets`, must not be `None`")  # noqa: E501

        self._available_markets = available_markets

    @property
    def external_urls(self):
        """Gets the external_urls of this AlbumBase.  # noqa: E501

        Known external URLs for this album.   # noqa: E501

        :return: The external_urls of this AlbumBase.  # noqa: E501
        :rtype: AllOfAlbumBaseExternalUrls
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this AlbumBase.

        Known external URLs for this album.   # noqa: E501

        :param external_urls: The external_urls of this AlbumBase.  # noqa: E501
        :type: AllOfAlbumBaseExternalUrls
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")  # noqa: E501

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this AlbumBase.  # noqa: E501

        A link to the Web API endpoint providing full details of the album.   # noqa: E501

        :return: The href of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this AlbumBase.

        A link to the Web API endpoint providing full details of the album.   # noqa: E501

        :param href: The href of this AlbumBase.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def id(self):
        """Gets the id of this AlbumBase.  # noqa: E501

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.   # noqa: E501

        :return: The id of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlbumBase.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.   # noqa: E501

        :param id: The id of this AlbumBase.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def images(self):
        """Gets the images of this AlbumBase.  # noqa: E501

        The cover art for the album in various sizes, widest first.   # noqa: E501

        :return: The images of this AlbumBase.  # noqa: E501
        :rtype: list[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this AlbumBase.

        The cover art for the album in various sizes, widest first.   # noqa: E501

        :param images: The images of this AlbumBase.  # noqa: E501
        :type: list[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def name(self):
        """Gets the name of this AlbumBase.  # noqa: E501

        The name of the album. In case of an album takedown, the value may be an empty string.   # noqa: E501

        :return: The name of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlbumBase.

        The name of the album. In case of an album takedown, the value may be an empty string.   # noqa: E501

        :param name: The name of this AlbumBase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this AlbumBase.  # noqa: E501

        The date the album was first released.   # noqa: E501

        :return: The release_date of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AlbumBase.

        The date the album was first released.   # noqa: E501

        :param release_date: The release_date of this AlbumBase.  # noqa: E501
        :type: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501

        self._release_date = release_date

    @property
    def release_date_precision(self):
        """Gets the release_date_precision of this AlbumBase.  # noqa: E501

        The precision with which `release_date` value is known.   # noqa: E501

        :return: The release_date_precision of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._release_date_precision

    @release_date_precision.setter
    def release_date_precision(self, release_date_precision):
        """Sets the release_date_precision of this AlbumBase.

        The precision with which `release_date` value is known.   # noqa: E501

        :param release_date_precision: The release_date_precision of this AlbumBase.  # noqa: E501
        :type: str
        """
        if release_date_precision is None:
            raise ValueError("Invalid value for `release_date_precision`, must not be `None`")  # noqa: E501
        allowed_values = ["year", "month", "day"]  # noqa: E501
        if release_date_precision not in allowed_values:
            raise ValueError(
                "Invalid value for `release_date_precision` ({0}), must be one of {1}"  # noqa: E501
                .format(release_date_precision, allowed_values)
            )

        self._release_date_precision = release_date_precision

    @property
    def restrictions(self):
        """Gets the restrictions of this AlbumBase.  # noqa: E501

        Included in the response when a content restriction is applied.   # noqa: E501

        :return: The restrictions of this AlbumBase.  # noqa: E501
        :rtype: AllOfAlbumBaseRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this AlbumBase.

        Included in the response when a content restriction is applied.   # noqa: E501

        :param restrictions: The restrictions of this AlbumBase.  # noqa: E501
        :type: AllOfAlbumBaseRestrictions
        """

        self._restrictions = restrictions

    @property
    def type(self):
        """Gets the type of this AlbumBase.  # noqa: E501

        The object type.   # noqa: E501

        :return: The type of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlbumBase.

        The object type.   # noqa: E501

        :param type: The type of this AlbumBase.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["album"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this AlbumBase.  # noqa: E501

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.   # noqa: E501

        :return: The uri of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AlbumBase.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.   # noqa: E501

        :param uri: The uri of this AlbumBase.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def copyrights(self):
        """Gets the copyrights of this AlbumBase.  # noqa: E501

        The copyright statements of the album.   # noqa: E501

        :return: The copyrights of this AlbumBase.  # noqa: E501
        :rtype: list[CopyrightObject]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this AlbumBase.

        The copyright statements of the album.   # noqa: E501

        :param copyrights: The copyrights of this AlbumBase.  # noqa: E501
        :type: list[CopyrightObject]
        """

        self._copyrights = copyrights

    @property
    def external_ids(self):
        """Gets the external_ids of this AlbumBase.  # noqa: E501

        Known external IDs for the album.   # noqa: E501

        :return: The external_ids of this AlbumBase.  # noqa: E501
        :rtype: AllOfAlbumBaseExternalIds
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this AlbumBase.

        Known external IDs for the album.   # noqa: E501

        :param external_ids: The external_ids of this AlbumBase.  # noqa: E501
        :type: AllOfAlbumBaseExternalIds
        """

        self._external_ids = external_ids

    @property
    def genres(self):
        """Gets the genres of this AlbumBase.  # noqa: E501

        A list of the genres the album is associated with. If not yet classified, the array is empty.   # noqa: E501

        :return: The genres of this AlbumBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this AlbumBase.

        A list of the genres the album is associated with. If not yet classified, the array is empty.   # noqa: E501

        :param genres: The genres of this AlbumBase.  # noqa: E501
        :type: list[str]
        """

        self._genres = genres

    @property
    def label(self):
        """Gets the label of this AlbumBase.  # noqa: E501

        The label associated with the album.   # noqa: E501

        :return: The label of this AlbumBase.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AlbumBase.

        The label associated with the album.   # noqa: E501

        :param label: The label of this AlbumBase.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def popularity(self):
        """Gets the popularity of this AlbumBase.  # noqa: E501

        The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.   # noqa: E501

        :return: The popularity of this AlbumBase.  # noqa: E501
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this AlbumBase.

        The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.   # noqa: E501

        :param popularity: The popularity of this AlbumBase.  # noqa: E501
        :type: int
        """

        self._popularity = popularity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlbumBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlbumBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
