# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioAnalysisObjectTrack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_samples': 'int',
        'duration': 'float',
        'sample_md5': 'str',
        'offset_seconds': 'int',
        'window_seconds': 'int',
        'analysis_sample_rate': 'int',
        'analysis_channels': 'int',
        'end_of_fade_in': 'float',
        'start_of_fade_out': 'float',
        'loudness': 'Loudness',
        'tempo': 'Tempo',
        'tempo_confidence': 'float',
        'time_signature': 'TimeSignature',
        'time_signature_confidence': 'float',
        'key': 'Key',
        'key_confidence': 'float',
        'mode': 'Mode',
        'mode_confidence': 'float',
        'codestring': 'str',
        'code_version': 'float',
        'echoprintstring': 'str',
        'echoprint_version': 'float',
        'synchstring': 'str',
        'synch_version': 'float',
        'rhythmstring': 'str',
        'rhythm_version': 'float'
    }

    attribute_map = {
        'num_samples': 'num_samples',
        'duration': 'duration',
        'sample_md5': 'sample_md5',
        'offset_seconds': 'offset_seconds',
        'window_seconds': 'window_seconds',
        'analysis_sample_rate': 'analysis_sample_rate',
        'analysis_channels': 'analysis_channels',
        'end_of_fade_in': 'end_of_fade_in',
        'start_of_fade_out': 'start_of_fade_out',
        'loudness': 'loudness',
        'tempo': 'tempo',
        'tempo_confidence': 'tempo_confidence',
        'time_signature': 'time_signature',
        'time_signature_confidence': 'time_signature_confidence',
        'key': 'key',
        'key_confidence': 'key_confidence',
        'mode': 'mode',
        'mode_confidence': 'mode_confidence',
        'codestring': 'codestring',
        'code_version': 'code_version',
        'echoprintstring': 'echoprintstring',
        'echoprint_version': 'echoprint_version',
        'synchstring': 'synchstring',
        'synch_version': 'synch_version',
        'rhythmstring': 'rhythmstring',
        'rhythm_version': 'rhythm_version'
    }

    def __init__(self, num_samples=None, duration=None, sample_md5=None, offset_seconds=None, window_seconds=None, analysis_sample_rate=None, analysis_channels=None, end_of_fade_in=None, start_of_fade_out=None, loudness=None, tempo=None, tempo_confidence=None, time_signature=None, time_signature_confidence=None, key=None, key_confidence=None, mode=None, mode_confidence=None, codestring=None, code_version=None, echoprintstring=None, echoprint_version=None, synchstring=None, synch_version=None, rhythmstring=None, rhythm_version=None):  # noqa: E501
        """AudioAnalysisObjectTrack - a model defined in Swagger"""  # noqa: E501
        self._num_samples = None
        self._duration = None
        self._sample_md5 = None
        self._offset_seconds = None
        self._window_seconds = None
        self._analysis_sample_rate = None
        self._analysis_channels = None
        self._end_of_fade_in = None
        self._start_of_fade_out = None
        self._loudness = None
        self._tempo = None
        self._tempo_confidence = None
        self._time_signature = None
        self._time_signature_confidence = None
        self._key = None
        self._key_confidence = None
        self._mode = None
        self._mode_confidence = None
        self._codestring = None
        self._code_version = None
        self._echoprintstring = None
        self._echoprint_version = None
        self._synchstring = None
        self._synch_version = None
        self._rhythmstring = None
        self._rhythm_version = None
        self.discriminator = None
        if num_samples is not None:
            self.num_samples = num_samples
        if duration is not None:
            self.duration = duration
        if sample_md5 is not None:
            self.sample_md5 = sample_md5
        if offset_seconds is not None:
            self.offset_seconds = offset_seconds
        if window_seconds is not None:
            self.window_seconds = window_seconds
        if analysis_sample_rate is not None:
            self.analysis_sample_rate = analysis_sample_rate
        if analysis_channels is not None:
            self.analysis_channels = analysis_channels
        if end_of_fade_in is not None:
            self.end_of_fade_in = end_of_fade_in
        if start_of_fade_out is not None:
            self.start_of_fade_out = start_of_fade_out
        if loudness is not None:
            self.loudness = loudness
        if tempo is not None:
            self.tempo = tempo
        if tempo_confidence is not None:
            self.tempo_confidence = tempo_confidence
        if time_signature is not None:
            self.time_signature = time_signature
        if time_signature_confidence is not None:
            self.time_signature_confidence = time_signature_confidence
        if key is not None:
            self.key = key
        if key_confidence is not None:
            self.key_confidence = key_confidence
        if mode is not None:
            self.mode = mode
        if mode_confidence is not None:
            self.mode_confidence = mode_confidence
        if codestring is not None:
            self.codestring = codestring
        if code_version is not None:
            self.code_version = code_version
        if echoprintstring is not None:
            self.echoprintstring = echoprintstring
        if echoprint_version is not None:
            self.echoprint_version = echoprint_version
        if synchstring is not None:
            self.synchstring = synchstring
        if synch_version is not None:
            self.synch_version = synch_version
        if rhythmstring is not None:
            self.rhythmstring = rhythmstring
        if rhythm_version is not None:
            self.rhythm_version = rhythm_version

    @property
    def num_samples(self):
        """Gets the num_samples of this AudioAnalysisObjectTrack.  # noqa: E501

        The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.  # noqa: E501

        :return: The num_samples of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this AudioAnalysisObjectTrack.

        The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.  # noqa: E501

        :param num_samples: The num_samples of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: int
        """

        self._num_samples = num_samples

    @property
    def duration(self):
        """Gets the duration of this AudioAnalysisObjectTrack.  # noqa: E501

        Length of the track in seconds.  # noqa: E501

        :return: The duration of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this AudioAnalysisObjectTrack.

        Length of the track in seconds.  # noqa: E501

        :param duration: The duration of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def sample_md5(self):
        """Gets the sample_md5 of this AudioAnalysisObjectTrack.  # noqa: E501

        This field will always contain the empty string.  # noqa: E501

        :return: The sample_md5 of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: str
        """
        return self._sample_md5

    @sample_md5.setter
    def sample_md5(self, sample_md5):
        """Sets the sample_md5 of this AudioAnalysisObjectTrack.

        This field will always contain the empty string.  # noqa: E501

        :param sample_md5: The sample_md5 of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: str
        """

        self._sample_md5 = sample_md5

    @property
    def offset_seconds(self):
        """Gets the offset_seconds of this AudioAnalysisObjectTrack.  # noqa: E501

        An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)  # noqa: E501

        :return: The offset_seconds of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: int
        """
        return self._offset_seconds

    @offset_seconds.setter
    def offset_seconds(self, offset_seconds):
        """Sets the offset_seconds of this AudioAnalysisObjectTrack.

        An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)  # noqa: E501

        :param offset_seconds: The offset_seconds of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: int
        """

        self._offset_seconds = offset_seconds

    @property
    def window_seconds(self):
        """Gets the window_seconds of this AudioAnalysisObjectTrack.  # noqa: E501

        The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)  # noqa: E501

        :return: The window_seconds of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: int
        """
        return self._window_seconds

    @window_seconds.setter
    def window_seconds(self, window_seconds):
        """Sets the window_seconds of this AudioAnalysisObjectTrack.

        The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)  # noqa: E501

        :param window_seconds: The window_seconds of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: int
        """

        self._window_seconds = window_seconds

    @property
    def analysis_sample_rate(self):
        """Gets the analysis_sample_rate of this AudioAnalysisObjectTrack.  # noqa: E501

        The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.  # noqa: E501

        :return: The analysis_sample_rate of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: int
        """
        return self._analysis_sample_rate

    @analysis_sample_rate.setter
    def analysis_sample_rate(self, analysis_sample_rate):
        """Sets the analysis_sample_rate of this AudioAnalysisObjectTrack.

        The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.  # noqa: E501

        :param analysis_sample_rate: The analysis_sample_rate of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: int
        """

        self._analysis_sample_rate = analysis_sample_rate

    @property
    def analysis_channels(self):
        """Gets the analysis_channels of this AudioAnalysisObjectTrack.  # noqa: E501

        The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.  # noqa: E501

        :return: The analysis_channels of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: int
        """
        return self._analysis_channels

    @analysis_channels.setter
    def analysis_channels(self, analysis_channels):
        """Sets the analysis_channels of this AudioAnalysisObjectTrack.

        The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.  # noqa: E501

        :param analysis_channels: The analysis_channels of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: int
        """

        self._analysis_channels = analysis_channels

    @property
    def end_of_fade_in(self):
        """Gets the end_of_fade_in of this AudioAnalysisObjectTrack.  # noqa: E501

        The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.  # noqa: E501

        :return: The end_of_fade_in of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._end_of_fade_in

    @end_of_fade_in.setter
    def end_of_fade_in(self, end_of_fade_in):
        """Sets the end_of_fade_in of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.  # noqa: E501

        :param end_of_fade_in: The end_of_fade_in of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._end_of_fade_in = end_of_fade_in

    @property
    def start_of_fade_out(self):
        """Gets the start_of_fade_out of this AudioAnalysisObjectTrack.  # noqa: E501

        The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.  # noqa: E501

        :return: The start_of_fade_out of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._start_of_fade_out

    @start_of_fade_out.setter
    def start_of_fade_out(self, start_of_fade_out):
        """Sets the start_of_fade_out of this AudioAnalysisObjectTrack.

        The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.  # noqa: E501

        :param start_of_fade_out: The start_of_fade_out of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._start_of_fade_out = start_of_fade_out

    @property
    def loudness(self):
        """Gets the loudness of this AudioAnalysisObjectTrack.  # noqa: E501


        :return: The loudness of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: Loudness
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this AudioAnalysisObjectTrack.


        :param loudness: The loudness of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: Loudness
        """

        self._loudness = loudness

    @property
    def tempo(self):
        """Gets the tempo of this AudioAnalysisObjectTrack.  # noqa: E501


        :return: The tempo of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: Tempo
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioAnalysisObjectTrack.


        :param tempo: The tempo of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: Tempo
        """

        self._tempo = tempo

    @property
    def tempo_confidence(self):
        """Gets the tempo_confidence of this AudioAnalysisObjectTrack.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.  # noqa: E501

        :return: The tempo_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._tempo_confidence

    @tempo_confidence.setter
    def tempo_confidence(self, tempo_confidence):
        """Sets the tempo_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.  # noqa: E501

        :param tempo_confidence: The tempo_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._tempo_confidence = tempo_confidence

    @property
    def time_signature(self):
        """Gets the time_signature of this AudioAnalysisObjectTrack.  # noqa: E501


        :return: The time_signature of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: TimeSignature
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this AudioAnalysisObjectTrack.


        :param time_signature: The time_signature of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: TimeSignature
        """

        self._time_signature = time_signature

    @property
    def time_signature_confidence(self):
        """Gets the time_signature_confidence of this AudioAnalysisObjectTrack.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.  # noqa: E501

        :return: The time_signature_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._time_signature_confidence

    @time_signature_confidence.setter
    def time_signature_confidence(self, time_signature_confidence):
        """Sets the time_signature_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.  # noqa: E501

        :param time_signature_confidence: The time_signature_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._time_signature_confidence = time_signature_confidence

    @property
    def key(self):
        """Gets the key of this AudioAnalysisObjectTrack.  # noqa: E501


        :return: The key of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioAnalysisObjectTrack.


        :param key: The key of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: Key
        """

        self._key = key

    @property
    def key_confidence(self):
        """Gets the key_confidence of this AudioAnalysisObjectTrack.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `key`.  # noqa: E501

        :return: The key_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._key_confidence

    @key_confidence.setter
    def key_confidence(self, key_confidence):
        """Sets the key_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `key`.  # noqa: E501

        :param key_confidence: The key_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._key_confidence = key_confidence

    @property
    def mode(self):
        """Gets the mode of this AudioAnalysisObjectTrack.  # noqa: E501


        :return: The mode of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AudioAnalysisObjectTrack.


        :param mode: The mode of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: Mode
        """

        self._mode = mode

    @property
    def mode_confidence(self):
        """Gets the mode_confidence of this AudioAnalysisObjectTrack.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.  # noqa: E501

        :return: The mode_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._mode_confidence

    @mode_confidence.setter
    def mode_confidence(self, mode_confidence):
        """Sets the mode_confidence of this AudioAnalysisObjectTrack.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.  # noqa: E501

        :param mode_confidence: The mode_confidence of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._mode_confidence = mode_confidence

    @property
    def codestring(self):
        """Gets the codestring of this AudioAnalysisObjectTrack.  # noqa: E501

        An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.  # noqa: E501

        :return: The codestring of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: str
        """
        return self._codestring

    @codestring.setter
    def codestring(self, codestring):
        """Sets the codestring of this AudioAnalysisObjectTrack.

        An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.  # noqa: E501

        :param codestring: The codestring of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: str
        """

        self._codestring = codestring

    @property
    def code_version(self):
        """Gets the code_version of this AudioAnalysisObjectTrack.  # noqa: E501

        A version number for the Echo Nest Musical Fingerprint format used in the codestring field.  # noqa: E501

        :return: The code_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this AudioAnalysisObjectTrack.

        A version number for the Echo Nest Musical Fingerprint format used in the codestring field.  # noqa: E501

        :param code_version: The code_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._code_version = code_version

    @property
    def echoprintstring(self):
        """Gets the echoprintstring of this AudioAnalysisObjectTrack.  # noqa: E501

        An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.  # noqa: E501

        :return: The echoprintstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: str
        """
        return self._echoprintstring

    @echoprintstring.setter
    def echoprintstring(self, echoprintstring):
        """Sets the echoprintstring of this AudioAnalysisObjectTrack.

        An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.  # noqa: E501

        :param echoprintstring: The echoprintstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: str
        """

        self._echoprintstring = echoprintstring

    @property
    def echoprint_version(self):
        """Gets the echoprint_version of this AudioAnalysisObjectTrack.  # noqa: E501

        A version number for the EchoPrint format used in the echoprintstring field.  # noqa: E501

        :return: The echoprint_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._echoprint_version

    @echoprint_version.setter
    def echoprint_version(self, echoprint_version):
        """Sets the echoprint_version of this AudioAnalysisObjectTrack.

        A version number for the EchoPrint format used in the echoprintstring field.  # noqa: E501

        :param echoprint_version: The echoprint_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._echoprint_version = echoprint_version

    @property
    def synchstring(self):
        """Gets the synchstring of this AudioAnalysisObjectTrack.  # noqa: E501

        A [Synchstring](https://github.com/echonest/synchdata) for this track.  # noqa: E501

        :return: The synchstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: str
        """
        return self._synchstring

    @synchstring.setter
    def synchstring(self, synchstring):
        """Sets the synchstring of this AudioAnalysisObjectTrack.

        A [Synchstring](https://github.com/echonest/synchdata) for this track.  # noqa: E501

        :param synchstring: The synchstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: str
        """

        self._synchstring = synchstring

    @property
    def synch_version(self):
        """Gets the synch_version of this AudioAnalysisObjectTrack.  # noqa: E501

        A version number for the Synchstring used in the synchstring field.  # noqa: E501

        :return: The synch_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._synch_version

    @synch_version.setter
    def synch_version(self, synch_version):
        """Sets the synch_version of this AudioAnalysisObjectTrack.

        A version number for the Synchstring used in the synchstring field.  # noqa: E501

        :param synch_version: The synch_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._synch_version = synch_version

    @property
    def rhythmstring(self):
        """Gets the rhythmstring of this AudioAnalysisObjectTrack.  # noqa: E501

        A Rhythmstring for this track. The format of this string is similar to the Synchstring.  # noqa: E501

        :return: The rhythmstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: str
        """
        return self._rhythmstring

    @rhythmstring.setter
    def rhythmstring(self, rhythmstring):
        """Sets the rhythmstring of this AudioAnalysisObjectTrack.

        A Rhythmstring for this track. The format of this string is similar to the Synchstring.  # noqa: E501

        :param rhythmstring: The rhythmstring of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: str
        """

        self._rhythmstring = rhythmstring

    @property
    def rhythm_version(self):
        """Gets the rhythm_version of this AudioAnalysisObjectTrack.  # noqa: E501

        A version number for the Rhythmstring used in the rhythmstring field.  # noqa: E501

        :return: The rhythm_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :rtype: float
        """
        return self._rhythm_version

    @rhythm_version.setter
    def rhythm_version(self, rhythm_version):
        """Sets the rhythm_version of this AudioAnalysisObjectTrack.

        A version number for the Rhythmstring used in the rhythmstring field.  # noqa: E501

        :param rhythm_version: The rhythm_version of this AudioAnalysisObjectTrack.  # noqa: E501
        :type: float
        """

        self._rhythm_version = rhythm_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioAnalysisObjectTrack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioAnalysisObjectTrack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
