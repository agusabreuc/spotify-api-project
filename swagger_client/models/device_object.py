# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_active': 'bool',
        'is_private_session': 'bool',
        'is_restricted': 'bool',
        'name': 'str',
        'type': 'str',
        'volume_percent': 'int'
    }

    attribute_map = {
        'id': 'id',
        'is_active': 'is_active',
        'is_private_session': 'is_private_session',
        'is_restricted': 'is_restricted',
        'name': 'name',
        'type': 'type',
        'volume_percent': 'volume_percent'
    }

    def __init__(self, id=None, is_active=None, is_private_session=None, is_restricted=None, name=None, type=None, volume_percent=None):  # noqa: E501
        """DeviceObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_active = None
        self._is_private_session = None
        self._is_restricted = None
        self._name = None
        self._type = None
        self._volume_percent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if is_private_session is not None:
            self.is_private_session = is_private_session
        if is_restricted is not None:
            self.is_restricted = is_restricted
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if volume_percent is not None:
            self.volume_percent = volume_percent

    @property
    def id(self):
        """Gets the id of this DeviceObject.  # noqa: E501

        The device ID.  # noqa: E501

        :return: The id of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceObject.

        The device ID.  # noqa: E501

        :param id: The id of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this DeviceObject.  # noqa: E501

        If this device is the currently active device.  # noqa: E501

        :return: The is_active of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DeviceObject.

        If this device is the currently active device.  # noqa: E501

        :param is_active: The is_active of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_private_session(self):
        """Gets the is_private_session of this DeviceObject.  # noqa: E501

        If this device is currently in a private session.  # noqa: E501

        :return: The is_private_session of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_session

    @is_private_session.setter
    def is_private_session(self, is_private_session):
        """Sets the is_private_session of this DeviceObject.

        If this device is currently in a private session.  # noqa: E501

        :param is_private_session: The is_private_session of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._is_private_session = is_private_session

    @property
    def is_restricted(self):
        """Gets the is_restricted of this DeviceObject.  # noqa: E501

        Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.  # noqa: E501

        :return: The is_restricted of this DeviceObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this DeviceObject.

        Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.  # noqa: E501

        :param is_restricted: The is_restricted of this DeviceObject.  # noqa: E501
        :type: bool
        """

        self._is_restricted = is_restricted

    @property
    def name(self):
        """Gets the name of this DeviceObject.  # noqa: E501

        A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.  # noqa: E501

        :return: The name of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceObject.

        A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.  # noqa: E501

        :param name: The name of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DeviceObject.  # noqa: E501

        Device type, such as \"computer\", \"smartphone\" or \"speaker\".  # noqa: E501

        :return: The type of this DeviceObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceObject.

        Device type, such as \"computer\", \"smartphone\" or \"speaker\".  # noqa: E501

        :param type: The type of this DeviceObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def volume_percent(self):
        """Gets the volume_percent of this DeviceObject.  # noqa: E501

        The current volume in percent.  # noqa: E501

        :return: The volume_percent of this DeviceObject.  # noqa: E501
        :rtype: int
        """
        return self._volume_percent

    @volume_percent.setter
    def volume_percent(self, volume_percent):
        """Sets the volume_percent of this DeviceObject.

        The current volume in percent.  # noqa: E501

        :param volume_percent: The volume_percent of this DeviceObject.  # noqa: E501
        :type: int
        """

        self._volume_percent = volume_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
