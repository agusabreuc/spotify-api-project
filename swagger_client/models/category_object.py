# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CategoryObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'icons': 'list[ImageObject]',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'href': 'href',
        'icons': 'icons',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, href=None, icons=None, id=None, name=None):  # noqa: E501
        """CategoryObject - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._icons = None
        self._id = None
        self._name = None
        self.discriminator = None
        self.href = href
        self.icons = icons
        self.id = id
        self.name = name

    @property
    def href(self):
        """Gets the href of this CategoryObject.  # noqa: E501

        A link to the Web API endpoint returning full details of the category.   # noqa: E501

        :return: The href of this CategoryObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CategoryObject.

        A link to the Web API endpoint returning full details of the category.   # noqa: E501

        :param href: The href of this CategoryObject.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def icons(self):
        """Gets the icons of this CategoryObject.  # noqa: E501

        The category icon, in various sizes.   # noqa: E501

        :return: The icons of this CategoryObject.  # noqa: E501
        :rtype: list[ImageObject]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this CategoryObject.

        The category icon, in various sizes.   # noqa: E501

        :param icons: The icons of this CategoryObject.  # noqa: E501
        :type: list[ImageObject]
        """
        if icons is None:
            raise ValueError("Invalid value for `icons`, must not be `None`")  # noqa: E501

        self._icons = icons

    @property
    def id(self):
        """Gets the id of this CategoryObject.  # noqa: E501

        The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.   # noqa: E501

        :return: The id of this CategoryObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryObject.

        The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.   # noqa: E501

        :param id: The id of this CategoryObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CategoryObject.  # noqa: E501

        The name of the category.   # noqa: E501

        :return: The name of this CategoryObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryObject.

        The name of the category.   # noqa: E501

        :param name: The name of this CategoryObject.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
