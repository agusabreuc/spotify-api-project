# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimplifiedPlaylistObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collaborative': 'bool',
        'description': 'str',
        'external_urls': 'AllOfSimplifiedPlaylistObjectExternalUrls',
        'href': 'str',
        'id': 'str',
        'images': 'list[ImageObject]',
        'name': 'str',
        'owner': 'AllOfSimplifiedPlaylistObjectOwner',
        'public': 'bool',
        'snapshot_id': 'str',
        'tracks': 'AllOfSimplifiedPlaylistObjectTracks',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'collaborative': 'collaborative',
        'description': 'description',
        'external_urls': 'external_urls',
        'href': 'href',
        'id': 'id',
        'images': 'images',
        'name': 'name',
        'owner': 'owner',
        'public': 'public',
        'snapshot_id': 'snapshot_id',
        'tracks': 'tracks',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, collaborative=None, description=None, external_urls=None, href=None, id=None, images=None, name=None, owner=None, public=None, snapshot_id=None, tracks=None, type=None, uri=None):  # noqa: E501
        """SimplifiedPlaylistObject - a model defined in Swagger"""  # noqa: E501
        self._collaborative = None
        self._description = None
        self._external_urls = None
        self._href = None
        self._id = None
        self._images = None
        self._name = None
        self._owner = None
        self._public = None
        self._snapshot_id = None
        self._tracks = None
        self._type = None
        self._uri = None
        self.discriminator = None
        if collaborative is not None:
            self.collaborative = collaborative
        if description is not None:
            self.description = description
        if external_urls is not None:
            self.external_urls = external_urls
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if public is not None:
            self.public = public
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if tracks is not None:
            self.tracks = tracks
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def collaborative(self):
        """Gets the collaborative of this SimplifiedPlaylistObject.  # noqa: E501

        `true` if the owner allows other users to modify the playlist.   # noqa: E501

        :return: The collaborative of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: bool
        """
        return self._collaborative

    @collaborative.setter
    def collaborative(self, collaborative):
        """Sets the collaborative of this SimplifiedPlaylistObject.

        `true` if the owner allows other users to modify the playlist.   # noqa: E501

        :param collaborative: The collaborative of this SimplifiedPlaylistObject.  # noqa: E501
        :type: bool
        """

        self._collaborative = collaborative

    @property
    def description(self):
        """Gets the description of this SimplifiedPlaylistObject.  # noqa: E501

        The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.   # noqa: E501

        :return: The description of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SimplifiedPlaylistObject.

        The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.   # noqa: E501

        :param description: The description of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def external_urls(self):
        """Gets the external_urls of this SimplifiedPlaylistObject.  # noqa: E501

        Known external URLs for this playlist.   # noqa: E501

        :return: The external_urls of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: AllOfSimplifiedPlaylistObjectExternalUrls
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this SimplifiedPlaylistObject.

        Known external URLs for this playlist.   # noqa: E501

        :param external_urls: The external_urls of this SimplifiedPlaylistObject.  # noqa: E501
        :type: AllOfSimplifiedPlaylistObjectExternalUrls
        """

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this SimplifiedPlaylistObject.  # noqa: E501

        A link to the Web API endpoint providing full details of the playlist.   # noqa: E501

        :return: The href of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SimplifiedPlaylistObject.

        A link to the Web API endpoint providing full details of the playlist.   # noqa: E501

        :param href: The href of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this SimplifiedPlaylistObject.  # noqa: E501

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.   # noqa: E501

        :return: The id of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimplifiedPlaylistObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.   # noqa: E501

        :param id: The id of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this SimplifiedPlaylistObject.  # noqa: E501

        Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._   # noqa: E501

        :return: The images of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: list[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SimplifiedPlaylistObject.

        Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._   # noqa: E501

        :param images: The images of this SimplifiedPlaylistObject.  # noqa: E501
        :type: list[ImageObject]
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this SimplifiedPlaylistObject.  # noqa: E501

        The name of the playlist.   # noqa: E501

        :return: The name of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimplifiedPlaylistObject.

        The name of the playlist.   # noqa: E501

        :param name: The name of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this SimplifiedPlaylistObject.  # noqa: E501

        The user who owns the playlist   # noqa: E501

        :return: The owner of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: AllOfSimplifiedPlaylistObjectOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SimplifiedPlaylistObject.

        The user who owns the playlist   # noqa: E501

        :param owner: The owner of this SimplifiedPlaylistObject.  # noqa: E501
        :type: AllOfSimplifiedPlaylistObjectOwner
        """

        self._owner = owner

    @property
    def public(self):
        """Gets the public of this SimplifiedPlaylistObject.  # noqa: E501

        The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)   # noqa: E501

        :return: The public of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this SimplifiedPlaylistObject.

        The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)   # noqa: E501

        :param public: The public of this SimplifiedPlaylistObject.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this SimplifiedPlaylistObject.  # noqa: E501

        The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version   # noqa: E501

        :return: The snapshot_id of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this SimplifiedPlaylistObject.

        The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version   # noqa: E501

        :param snapshot_id: The snapshot_id of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def tracks(self):
        """Gets the tracks of this SimplifiedPlaylistObject.  # noqa: E501

        A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.   # noqa: E501

        :return: The tracks of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: AllOfSimplifiedPlaylistObjectTracks
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this SimplifiedPlaylistObject.

        A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.   # noqa: E501

        :param tracks: The tracks of this SimplifiedPlaylistObject.  # noqa: E501
        :type: AllOfSimplifiedPlaylistObjectTracks
        """

        self._tracks = tracks

    @property
    def type(self):
        """Gets the type of this SimplifiedPlaylistObject.  # noqa: E501

        The object type: \"playlist\"   # noqa: E501

        :return: The type of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimplifiedPlaylistObject.

        The object type: \"playlist\"   # noqa: E501

        :param type: The type of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this SimplifiedPlaylistObject.  # noqa: E501

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.   # noqa: E501

        :return: The uri of this SimplifiedPlaylistObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SimplifiedPlaylistObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.   # noqa: E501

        :param uri: The uri of this SimplifiedPlaylistObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimplifiedPlaylistObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimplifiedPlaylistObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
