# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecommendationSeedObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after_filtering_size': 'int',
        'after_relinking_size': 'int',
        'href': 'str',
        'id': 'str',
        'initial_pool_size': 'int',
        'type': 'str'
    }

    attribute_map = {
        'after_filtering_size': 'afterFilteringSize',
        'after_relinking_size': 'afterRelinkingSize',
        'href': 'href',
        'id': 'id',
        'initial_pool_size': 'initialPoolSize',
        'type': 'type'
    }

    def __init__(self, after_filtering_size=None, after_relinking_size=None, href=None, id=None, initial_pool_size=None, type=None):  # noqa: E501
        """RecommendationSeedObject - a model defined in Swagger"""  # noqa: E501
        self._after_filtering_size = None
        self._after_relinking_size = None
        self._href = None
        self._id = None
        self._initial_pool_size = None
        self._type = None
        self.discriminator = None
        if after_filtering_size is not None:
            self.after_filtering_size = after_filtering_size
        if after_relinking_size is not None:
            self.after_relinking_size = after_relinking_size
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if initial_pool_size is not None:
            self.initial_pool_size = initial_pool_size
        if type is not None:
            self.type = type

    @property
    def after_filtering_size(self):
        """Gets the after_filtering_size of this RecommendationSeedObject.  # noqa: E501

        The number of tracks available after min\\_\\* and max\\_\\* filters have been applied.   # noqa: E501

        :return: The after_filtering_size of this RecommendationSeedObject.  # noqa: E501
        :rtype: int
        """
        return self._after_filtering_size

    @after_filtering_size.setter
    def after_filtering_size(self, after_filtering_size):
        """Sets the after_filtering_size of this RecommendationSeedObject.

        The number of tracks available after min\\_\\* and max\\_\\* filters have been applied.   # noqa: E501

        :param after_filtering_size: The after_filtering_size of this RecommendationSeedObject.  # noqa: E501
        :type: int
        """

        self._after_filtering_size = after_filtering_size

    @property
    def after_relinking_size(self):
        """Gets the after_relinking_size of this RecommendationSeedObject.  # noqa: E501

        The number of tracks available after relinking for regional availability.   # noqa: E501

        :return: The after_relinking_size of this RecommendationSeedObject.  # noqa: E501
        :rtype: int
        """
        return self._after_relinking_size

    @after_relinking_size.setter
    def after_relinking_size(self, after_relinking_size):
        """Sets the after_relinking_size of this RecommendationSeedObject.

        The number of tracks available after relinking for regional availability.   # noqa: E501

        :param after_relinking_size: The after_relinking_size of this RecommendationSeedObject.  # noqa: E501
        :type: int
        """

        self._after_relinking_size = after_relinking_size

    @property
    def href(self):
        """Gets the href of this RecommendationSeedObject.  # noqa: E501

        A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.   # noqa: E501

        :return: The href of this RecommendationSeedObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this RecommendationSeedObject.

        A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.   # noqa: E501

        :param href: The href of this RecommendationSeedObject.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this RecommendationSeedObject.  # noqa: E501

        The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.   # noqa: E501

        :return: The id of this RecommendationSeedObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecommendationSeedObject.

        The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.   # noqa: E501

        :param id: The id of this RecommendationSeedObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def initial_pool_size(self):
        """Gets the initial_pool_size of this RecommendationSeedObject.  # noqa: E501

        The number of recommended tracks available for this seed.   # noqa: E501

        :return: The initial_pool_size of this RecommendationSeedObject.  # noqa: E501
        :rtype: int
        """
        return self._initial_pool_size

    @initial_pool_size.setter
    def initial_pool_size(self, initial_pool_size):
        """Sets the initial_pool_size of this RecommendationSeedObject.

        The number of recommended tracks available for this seed.   # noqa: E501

        :param initial_pool_size: The initial_pool_size of this RecommendationSeedObject.  # noqa: E501
        :type: int
        """

        self._initial_pool_size = initial_pool_size

    @property
    def type(self):
        """Gets the type of this RecommendationSeedObject.  # noqa: E501

        The entity type of this seed. One of `artist`, `track` or `genre`.   # noqa: E501

        :return: The type of this RecommendationSeedObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecommendationSeedObject.

        The entity type of this seed. One of `artist`, `track` or `genre`.   # noqa: E501

        :param type: The type of this RecommendationSeedObject.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendationSeedObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendationSeedObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
