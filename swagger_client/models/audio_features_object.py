# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioFeaturesObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acousticness': 'float',
        'analysis_url': 'str',
        'danceability': 'float',
        'duration_ms': 'int',
        'energy': 'float',
        'id': 'str',
        'instrumentalness': 'float',
        'key': 'Key',
        'liveness': 'float',
        'loudness': 'Loudness',
        'mode': 'Mode',
        'speechiness': 'float',
        'tempo': 'Tempo',
        'time_signature': 'TimeSignature',
        'track_href': 'str',
        'type': 'str',
        'uri': 'str',
        'valence': 'float'
    }

    attribute_map = {
        'acousticness': 'acousticness',
        'analysis_url': 'analysis_url',
        'danceability': 'danceability',
        'duration_ms': 'duration_ms',
        'energy': 'energy',
        'id': 'id',
        'instrumentalness': 'instrumentalness',
        'key': 'key',
        'liveness': 'liveness',
        'loudness': 'loudness',
        'mode': 'mode',
        'speechiness': 'speechiness',
        'tempo': 'tempo',
        'time_signature': 'time_signature',
        'track_href': 'track_href',
        'type': 'type',
        'uri': 'uri',
        'valence': 'valence'
    }

    def __init__(self, acousticness=None, analysis_url=None, danceability=None, duration_ms=None, energy=None, id=None, instrumentalness=None, key=None, liveness=None, loudness=None, mode=None, speechiness=None, tempo=None, time_signature=None, track_href=None, type=None, uri=None, valence=None):  # noqa: E501
        """AudioFeaturesObject - a model defined in Swagger"""  # noqa: E501
        self._acousticness = None
        self._analysis_url = None
        self._danceability = None
        self._duration_ms = None
        self._energy = None
        self._id = None
        self._instrumentalness = None
        self._key = None
        self._liveness = None
        self._loudness = None
        self._mode = None
        self._speechiness = None
        self._tempo = None
        self._time_signature = None
        self._track_href = None
        self._type = None
        self._uri = None
        self._valence = None
        self.discriminator = None
        if acousticness is not None:
            self.acousticness = acousticness
        if analysis_url is not None:
            self.analysis_url = analysis_url
        if danceability is not None:
            self.danceability = danceability
        if duration_ms is not None:
            self.duration_ms = duration_ms
        if energy is not None:
            self.energy = energy
        if id is not None:
            self.id = id
        if instrumentalness is not None:
            self.instrumentalness = instrumentalness
        if key is not None:
            self.key = key
        if liveness is not None:
            self.liveness = liveness
        if loudness is not None:
            self.loudness = loudness
        if mode is not None:
            self.mode = mode
        if speechiness is not None:
            self.speechiness = speechiness
        if tempo is not None:
            self.tempo = tempo
        if time_signature is not None:
            self.time_signature = time_signature
        if track_href is not None:
            self.track_href = track_href
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri
        if valence is not None:
            self.valence = valence

    @property
    def acousticness(self):
        """Gets the acousticness of this AudioFeaturesObject.  # noqa: E501

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.   # noqa: E501

        :return: The acousticness of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._acousticness

    @acousticness.setter
    def acousticness(self, acousticness):
        """Sets the acousticness of this AudioFeaturesObject.

        A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.   # noqa: E501

        :param acousticness: The acousticness of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._acousticness = acousticness

    @property
    def analysis_url(self):
        """Gets the analysis_url of this AudioFeaturesObject.  # noqa: E501

        A URL to access the full audio analysis of this track. An access token is required to access this data.   # noqa: E501

        :return: The analysis_url of this AudioFeaturesObject.  # noqa: E501
        :rtype: str
        """
        return self._analysis_url

    @analysis_url.setter
    def analysis_url(self, analysis_url):
        """Sets the analysis_url of this AudioFeaturesObject.

        A URL to access the full audio analysis of this track. An access token is required to access this data.   # noqa: E501

        :param analysis_url: The analysis_url of this AudioFeaturesObject.  # noqa: E501
        :type: str
        """

        self._analysis_url = analysis_url

    @property
    def danceability(self):
        """Gets the danceability of this AudioFeaturesObject.  # noqa: E501

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.   # noqa: E501

        :return: The danceability of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._danceability

    @danceability.setter
    def danceability(self, danceability):
        """Sets the danceability of this AudioFeaturesObject.

        Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.   # noqa: E501

        :param danceability: The danceability of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._danceability = danceability

    @property
    def duration_ms(self):
        """Gets the duration_ms of this AudioFeaturesObject.  # noqa: E501

        The duration of the track in milliseconds.   # noqa: E501

        :return: The duration_ms of this AudioFeaturesObject.  # noqa: E501
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this AudioFeaturesObject.

        The duration of the track in milliseconds.   # noqa: E501

        :param duration_ms: The duration_ms of this AudioFeaturesObject.  # noqa: E501
        :type: int
        """

        self._duration_ms = duration_ms

    @property
    def energy(self):
        """Gets the energy of this AudioFeaturesObject.  # noqa: E501

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.   # noqa: E501

        :return: The energy of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this AudioFeaturesObject.

        Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.   # noqa: E501

        :param energy: The energy of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._energy = energy

    @property
    def id(self):
        """Gets the id of this AudioFeaturesObject.  # noqa: E501

        The Spotify ID for the track.   # noqa: E501

        :return: The id of this AudioFeaturesObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioFeaturesObject.

        The Spotify ID for the track.   # noqa: E501

        :param id: The id of this AudioFeaturesObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instrumentalness(self):
        """Gets the instrumentalness of this AudioFeaturesObject.  # noqa: E501

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.   # noqa: E501

        :return: The instrumentalness of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._instrumentalness

    @instrumentalness.setter
    def instrumentalness(self, instrumentalness):
        """Sets the instrumentalness of this AudioFeaturesObject.

        Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.   # noqa: E501

        :param instrumentalness: The instrumentalness of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._instrumentalness = instrumentalness

    @property
    def key(self):
        """Gets the key of this AudioFeaturesObject.  # noqa: E501


        :return: The key of this AudioFeaturesObject.  # noqa: E501
        :rtype: Key
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioFeaturesObject.


        :param key: The key of this AudioFeaturesObject.  # noqa: E501
        :type: Key
        """

        self._key = key

    @property
    def liveness(self):
        """Gets the liveness of this AudioFeaturesObject.  # noqa: E501

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.   # noqa: E501

        :return: The liveness of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._liveness

    @liveness.setter
    def liveness(self, liveness):
        """Sets the liveness of this AudioFeaturesObject.

        Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.   # noqa: E501

        :param liveness: The liveness of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._liveness = liveness

    @property
    def loudness(self):
        """Gets the loudness of this AudioFeaturesObject.  # noqa: E501


        :return: The loudness of this AudioFeaturesObject.  # noqa: E501
        :rtype: Loudness
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this AudioFeaturesObject.


        :param loudness: The loudness of this AudioFeaturesObject.  # noqa: E501
        :type: Loudness
        """

        self._loudness = loudness

    @property
    def mode(self):
        """Gets the mode of this AudioFeaturesObject.  # noqa: E501


        :return: The mode of this AudioFeaturesObject.  # noqa: E501
        :rtype: Mode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AudioFeaturesObject.


        :param mode: The mode of this AudioFeaturesObject.  # noqa: E501
        :type: Mode
        """

        self._mode = mode

    @property
    def speechiness(self):
        """Gets the speechiness of this AudioFeaturesObject.  # noqa: E501

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.   # noqa: E501

        :return: The speechiness of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._speechiness

    @speechiness.setter
    def speechiness(self, speechiness):
        """Sets the speechiness of this AudioFeaturesObject.

        Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.   # noqa: E501

        :param speechiness: The speechiness of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._speechiness = speechiness

    @property
    def tempo(self):
        """Gets the tempo of this AudioFeaturesObject.  # noqa: E501


        :return: The tempo of this AudioFeaturesObject.  # noqa: E501
        :rtype: Tempo
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioFeaturesObject.


        :param tempo: The tempo of this AudioFeaturesObject.  # noqa: E501
        :type: Tempo
        """

        self._tempo = tempo

    @property
    def time_signature(self):
        """Gets the time_signature of this AudioFeaturesObject.  # noqa: E501


        :return: The time_signature of this AudioFeaturesObject.  # noqa: E501
        :rtype: TimeSignature
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this AudioFeaturesObject.


        :param time_signature: The time_signature of this AudioFeaturesObject.  # noqa: E501
        :type: TimeSignature
        """

        self._time_signature = time_signature

    @property
    def track_href(self):
        """Gets the track_href of this AudioFeaturesObject.  # noqa: E501

        A link to the Web API endpoint providing full details of the track.   # noqa: E501

        :return: The track_href of this AudioFeaturesObject.  # noqa: E501
        :rtype: str
        """
        return self._track_href

    @track_href.setter
    def track_href(self, track_href):
        """Sets the track_href of this AudioFeaturesObject.

        A link to the Web API endpoint providing full details of the track.   # noqa: E501

        :param track_href: The track_href of this AudioFeaturesObject.  # noqa: E501
        :type: str
        """

        self._track_href = track_href

    @property
    def type(self):
        """Gets the type of this AudioFeaturesObject.  # noqa: E501

        The object type.   # noqa: E501

        :return: The type of this AudioFeaturesObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioFeaturesObject.

        The object type.   # noqa: E501

        :param type: The type of this AudioFeaturesObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["audio_features"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this AudioFeaturesObject.  # noqa: E501

        The Spotify URI for the track.   # noqa: E501

        :return: The uri of this AudioFeaturesObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AudioFeaturesObject.

        The Spotify URI for the track.   # noqa: E501

        :param uri: The uri of this AudioFeaturesObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def valence(self):
        """Gets the valence of this AudioFeaturesObject.  # noqa: E501

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).   # noqa: E501

        :return: The valence of this AudioFeaturesObject.  # noqa: E501
        :rtype: float
        """
        return self._valence

    @valence.setter
    def valence(self, valence):
        """Sets the valence of this AudioFeaturesObject.

        A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).   # noqa: E501

        :param valence: The valence of this AudioFeaturesObject.  # noqa: E501
        :type: float
        """

        self._valence = valence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioFeaturesObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioFeaturesObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
