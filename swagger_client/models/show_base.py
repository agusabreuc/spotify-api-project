# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShowBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_markets': 'list[str]',
        'copyrights': 'list[CopyrightObject]',
        'description': 'str',
        'html_description': 'str',
        'explicit': 'bool',
        'external_urls': 'AllOfShowBaseExternalUrls',
        'href': 'str',
        'id': 'str',
        'images': 'list[ImageObject]',
        'is_externally_hosted': 'bool',
        'languages': 'list[str]',
        'media_type': 'str',
        'name': 'str',
        'publisher': 'str',
        'type': 'str',
        'uri': 'str',
        'total_episodes': 'int'
    }

    attribute_map = {
        'available_markets': 'available_markets',
        'copyrights': 'copyrights',
        'description': 'description',
        'html_description': 'html_description',
        'explicit': 'explicit',
        'external_urls': 'external_urls',
        'href': 'href',
        'id': 'id',
        'images': 'images',
        'is_externally_hosted': 'is_externally_hosted',
        'languages': 'languages',
        'media_type': 'media_type',
        'name': 'name',
        'publisher': 'publisher',
        'type': 'type',
        'uri': 'uri',
        'total_episodes': 'total_episodes'
    }

    def __init__(self, available_markets=None, copyrights=None, description=None, html_description=None, explicit=None, external_urls=None, href=None, id=None, images=None, is_externally_hosted=None, languages=None, media_type=None, name=None, publisher=None, type=None, uri=None, total_episodes=None):  # noqa: E501
        """ShowBase - a model defined in Swagger"""  # noqa: E501
        self._available_markets = None
        self._copyrights = None
        self._description = None
        self._html_description = None
        self._explicit = None
        self._external_urls = None
        self._href = None
        self._id = None
        self._images = None
        self._is_externally_hosted = None
        self._languages = None
        self._media_type = None
        self._name = None
        self._publisher = None
        self._type = None
        self._uri = None
        self._total_episodes = None
        self.discriminator = None
        self.available_markets = available_markets
        self.copyrights = copyrights
        self.description = description
        self.html_description = html_description
        self.explicit = explicit
        self.external_urls = external_urls
        self.href = href
        self.id = id
        self.images = images
        self.is_externally_hosted = is_externally_hosted
        self.languages = languages
        self.media_type = media_type
        self.name = name
        self.publisher = publisher
        self.type = type
        self.uri = uri
        self.total_episodes = total_episodes

    @property
    def available_markets(self):
        """Gets the available_markets of this ShowBase.  # noqa: E501

        A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.   # noqa: E501

        :return: The available_markets of this ShowBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this ShowBase.

        A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.   # noqa: E501

        :param available_markets: The available_markets of this ShowBase.  # noqa: E501
        :type: list[str]
        """
        if available_markets is None:
            raise ValueError("Invalid value for `available_markets`, must not be `None`")  # noqa: E501

        self._available_markets = available_markets

    @property
    def copyrights(self):
        """Gets the copyrights of this ShowBase.  # noqa: E501

        The copyright statements of the show.   # noqa: E501

        :return: The copyrights of this ShowBase.  # noqa: E501
        :rtype: list[CopyrightObject]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this ShowBase.

        The copyright statements of the show.   # noqa: E501

        :param copyrights: The copyrights of this ShowBase.  # noqa: E501
        :type: list[CopyrightObject]
        """
        if copyrights is None:
            raise ValueError("Invalid value for `copyrights`, must not be `None`")  # noqa: E501

        self._copyrights = copyrights

    @property
    def description(self):
        """Gets the description of this ShowBase.  # noqa: E501

        A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.   # noqa: E501

        :return: The description of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShowBase.

        A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.   # noqa: E501

        :param description: The description of this ShowBase.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def html_description(self):
        """Gets the html_description of this ShowBase.  # noqa: E501

        A description of the show. This field may contain HTML tags.   # noqa: E501

        :return: The html_description of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description):
        """Sets the html_description of this ShowBase.

        A description of the show. This field may contain HTML tags.   # noqa: E501

        :param html_description: The html_description of this ShowBase.  # noqa: E501
        :type: str
        """
        if html_description is None:
            raise ValueError("Invalid value for `html_description`, must not be `None`")  # noqa: E501

        self._html_description = html_description

    @property
    def explicit(self):
        """Gets the explicit of this ShowBase.  # noqa: E501

        Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).   # noqa: E501

        :return: The explicit of this ShowBase.  # noqa: E501
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this ShowBase.

        Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).   # noqa: E501

        :param explicit: The explicit of this ShowBase.  # noqa: E501
        :type: bool
        """
        if explicit is None:
            raise ValueError("Invalid value for `explicit`, must not be `None`")  # noqa: E501

        self._explicit = explicit

    @property
    def external_urls(self):
        """Gets the external_urls of this ShowBase.  # noqa: E501

        External URLs for this show.   # noqa: E501

        :return: The external_urls of this ShowBase.  # noqa: E501
        :rtype: AllOfShowBaseExternalUrls
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this ShowBase.

        External URLs for this show.   # noqa: E501

        :param external_urls: The external_urls of this ShowBase.  # noqa: E501
        :type: AllOfShowBaseExternalUrls
        """
        if external_urls is None:
            raise ValueError("Invalid value for `external_urls`, must not be `None`")  # noqa: E501

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this ShowBase.  # noqa: E501

        A link to the Web API endpoint providing full details of the show.   # noqa: E501

        :return: The href of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ShowBase.

        A link to the Web API endpoint providing full details of the show.   # noqa: E501

        :param href: The href of this ShowBase.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def id(self):
        """Gets the id of this ShowBase.  # noqa: E501

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.   # noqa: E501

        :return: The id of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShowBase.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.   # noqa: E501

        :param id: The id of this ShowBase.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def images(self):
        """Gets the images of this ShowBase.  # noqa: E501

        The cover art for the show in various sizes, widest first.   # noqa: E501

        :return: The images of this ShowBase.  # noqa: E501
        :rtype: list[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ShowBase.

        The cover art for the show in various sizes, widest first.   # noqa: E501

        :param images: The images of this ShowBase.  # noqa: E501
        :type: list[ImageObject]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def is_externally_hosted(self):
        """Gets the is_externally_hosted of this ShowBase.  # noqa: E501

        True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.   # noqa: E501

        :return: The is_externally_hosted of this ShowBase.  # noqa: E501
        :rtype: bool
        """
        return self._is_externally_hosted

    @is_externally_hosted.setter
    def is_externally_hosted(self, is_externally_hosted):
        """Sets the is_externally_hosted of this ShowBase.

        True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.   # noqa: E501

        :param is_externally_hosted: The is_externally_hosted of this ShowBase.  # noqa: E501
        :type: bool
        """
        if is_externally_hosted is None:
            raise ValueError("Invalid value for `is_externally_hosted`, must not be `None`")  # noqa: E501

        self._is_externally_hosted = is_externally_hosted

    @property
    def languages(self):
        """Gets the languages of this ShowBase.  # noqa: E501

        A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.   # noqa: E501

        :return: The languages of this ShowBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this ShowBase.

        A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.   # noqa: E501

        :param languages: The languages of this ShowBase.  # noqa: E501
        :type: list[str]
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")  # noqa: E501

        self._languages = languages

    @property
    def media_type(self):
        """Gets the media_type of this ShowBase.  # noqa: E501

        The media type of the show.   # noqa: E501

        :return: The media_type of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this ShowBase.

        The media type of the show.   # noqa: E501

        :param media_type: The media_type of this ShowBase.  # noqa: E501
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this ShowBase.  # noqa: E501

        The name of the episode.   # noqa: E501

        :return: The name of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShowBase.

        The name of the episode.   # noqa: E501

        :param name: The name of this ShowBase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def publisher(self):
        """Gets the publisher of this ShowBase.  # noqa: E501

        The publisher of the show.   # noqa: E501

        :return: The publisher of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this ShowBase.

        The publisher of the show.   # noqa: E501

        :param publisher: The publisher of this ShowBase.  # noqa: E501
        :type: str
        """
        if publisher is None:
            raise ValueError("Invalid value for `publisher`, must not be `None`")  # noqa: E501

        self._publisher = publisher

    @property
    def type(self):
        """Gets the type of this ShowBase.  # noqa: E501

        The object type.   # noqa: E501

        :return: The type of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShowBase.

        The object type.   # noqa: E501

        :param type: The type of this ShowBase.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["show"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this ShowBase.  # noqa: E501

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.   # noqa: E501

        :return: The uri of this ShowBase.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ShowBase.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.   # noqa: E501

        :param uri: The uri of this ShowBase.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def total_episodes(self):
        """Gets the total_episodes of this ShowBase.  # noqa: E501

        The total number of episodes in the show.   # noqa: E501

        :return: The total_episodes of this ShowBase.  # noqa: E501
        :rtype: int
        """
        return self._total_episodes

    @total_episodes.setter
    def total_episodes(self, total_episodes):
        """Sets the total_episodes of this ShowBase.

        The total number of episodes in the show.   # noqa: E501

        :param total_episodes: The total_episodes of this ShowBase.  # noqa: E501
        :type: int
        """
        if total_episodes is None:
            raise ValueError("Invalid value for `total_episodes`, must not be `None`")  # noqa: E501

        self._total_episodes = total_episodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShowBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShowBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
