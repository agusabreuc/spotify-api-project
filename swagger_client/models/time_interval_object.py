# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeIntervalObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'float',
        'duration': 'float',
        'confidence': 'float'
    }

    attribute_map = {
        'start': 'start',
        'duration': 'duration',
        'confidence': 'confidence'
    }

    def __init__(self, start=None, duration=None, confidence=None):  # noqa: E501
        """TimeIntervalObject - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._duration = None
        self._confidence = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration
        if confidence is not None:
            self.confidence = confidence

    @property
    def start(self):
        """Gets the start of this TimeIntervalObject.  # noqa: E501

        The starting point (in seconds) of the time interval.  # noqa: E501

        :return: The start of this TimeIntervalObject.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeIntervalObject.

        The starting point (in seconds) of the time interval.  # noqa: E501

        :param start: The start of this TimeIntervalObject.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this TimeIntervalObject.  # noqa: E501

        The duration (in seconds) of the time interval.  # noqa: E501

        :return: The duration of this TimeIntervalObject.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeIntervalObject.

        The duration (in seconds) of the time interval.  # noqa: E501

        :param duration: The duration of this TimeIntervalObject.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def confidence(self):
        """Gets the confidence of this TimeIntervalObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the interval.  # noqa: E501

        :return: The confidence of this TimeIntervalObject.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TimeIntervalObject.

        The confidence, from 0.0 to 1.0, of the reliability of the interval.  # noqa: E501

        :param confidence: The confidence of this TimeIntervalObject.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeIntervalObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeIntervalObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
