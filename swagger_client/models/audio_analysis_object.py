# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AudioAnalysisObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta': 'AudioAnalysisObjectMeta',
        'track': 'AudioAnalysisObjectTrack',
        'bars': 'list[TimeIntervalObject]',
        'beats': 'list[TimeIntervalObject]',
        'sections': 'list[SectionObject]',
        'segments': 'list[SegmentObject]',
        'tatums': 'list[TimeIntervalObject]'
    }

    attribute_map = {
        'meta': 'meta',
        'track': 'track',
        'bars': 'bars',
        'beats': 'beats',
        'sections': 'sections',
        'segments': 'segments',
        'tatums': 'tatums'
    }

    def __init__(self, meta=None, track=None, bars=None, beats=None, sections=None, segments=None, tatums=None):  # noqa: E501
        """AudioAnalysisObject - a model defined in Swagger"""  # noqa: E501
        self._meta = None
        self._track = None
        self._bars = None
        self._beats = None
        self._sections = None
        self._segments = None
        self._tatums = None
        self.discriminator = None
        if meta is not None:
            self.meta = meta
        if track is not None:
            self.track = track
        if bars is not None:
            self.bars = bars
        if beats is not None:
            self.beats = beats
        if sections is not None:
            self.sections = sections
        if segments is not None:
            self.segments = segments
        if tatums is not None:
            self.tatums = tatums

    @property
    def meta(self):
        """Gets the meta of this AudioAnalysisObject.  # noqa: E501


        :return: The meta of this AudioAnalysisObject.  # noqa: E501
        :rtype: AudioAnalysisObjectMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this AudioAnalysisObject.


        :param meta: The meta of this AudioAnalysisObject.  # noqa: E501
        :type: AudioAnalysisObjectMeta
        """

        self._meta = meta

    @property
    def track(self):
        """Gets the track of this AudioAnalysisObject.  # noqa: E501


        :return: The track of this AudioAnalysisObject.  # noqa: E501
        :rtype: AudioAnalysisObjectTrack
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this AudioAnalysisObject.


        :param track: The track of this AudioAnalysisObject.  # noqa: E501
        :type: AudioAnalysisObjectTrack
        """

        self._track = track

    @property
    def bars(self):
        """Gets the bars of this AudioAnalysisObject.  # noqa: E501

        The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.  # noqa: E501

        :return: The bars of this AudioAnalysisObject.  # noqa: E501
        :rtype: list[TimeIntervalObject]
        """
        return self._bars

    @bars.setter
    def bars(self, bars):
        """Sets the bars of this AudioAnalysisObject.

        The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.  # noqa: E501

        :param bars: The bars of this AudioAnalysisObject.  # noqa: E501
        :type: list[TimeIntervalObject]
        """

        self._bars = bars

    @property
    def beats(self):
        """Gets the beats of this AudioAnalysisObject.  # noqa: E501

        The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.  # noqa: E501

        :return: The beats of this AudioAnalysisObject.  # noqa: E501
        :rtype: list[TimeIntervalObject]
        """
        return self._beats

    @beats.setter
    def beats(self, beats):
        """Sets the beats of this AudioAnalysisObject.

        The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.  # noqa: E501

        :param beats: The beats of this AudioAnalysisObject.  # noqa: E501
        :type: list[TimeIntervalObject]
        """

        self._beats = beats

    @property
    def sections(self):
        """Gets the sections of this AudioAnalysisObject.  # noqa: E501

        Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.  # noqa: E501

        :return: The sections of this AudioAnalysisObject.  # noqa: E501
        :rtype: list[SectionObject]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this AudioAnalysisObject.

        Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.  # noqa: E501

        :param sections: The sections of this AudioAnalysisObject.  # noqa: E501
        :type: list[SectionObject]
        """

        self._sections = sections

    @property
    def segments(self):
        """Gets the segments of this AudioAnalysisObject.  # noqa: E501

        Each segment contains a roughly conisistent sound throughout its duration.  # noqa: E501

        :return: The segments of this AudioAnalysisObject.  # noqa: E501
        :rtype: list[SegmentObject]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this AudioAnalysisObject.

        Each segment contains a roughly conisistent sound throughout its duration.  # noqa: E501

        :param segments: The segments of this AudioAnalysisObject.  # noqa: E501
        :type: list[SegmentObject]
        """

        self._segments = segments

    @property
    def tatums(self):
        """Gets the tatums of this AudioAnalysisObject.  # noqa: E501

        A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).  # noqa: E501

        :return: The tatums of this AudioAnalysisObject.  # noqa: E501
        :rtype: list[TimeIntervalObject]
        """
        return self._tatums

    @tatums.setter
    def tatums(self, tatums):
        """Sets the tatums of this AudioAnalysisObject.

        A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).  # noqa: E501

        :param tatums: The tatums of this AudioAnalysisObject.  # noqa: E501
        :type: list[TimeIntervalObject]
        """

        self._tatums = tatums

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AudioAnalysisObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioAnalysisObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
