# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PagingObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'limit': 'int',
        'next': 'str',
        'offset': 'int',
        'previous': 'str',
        'total': 'int'
    }

    attribute_map = {
        'href': 'href',
        'limit': 'limit',
        'next': 'next',
        'offset': 'offset',
        'previous': 'previous',
        'total': 'total'
    }

    def __init__(self, href=None, limit=None, next=None, offset=None, previous=None, total=None):  # noqa: E501
        """PagingObject - a model defined in Swagger"""  # noqa: E501
        self._href = None
        self._limit = None
        self._next = None
        self._offset = None
        self._previous = None
        self._total = None
        self.discriminator = None
        self.href = href
        self.limit = limit
        self.next = next
        self.offset = offset
        self.previous = previous
        self.total = total

    @property
    def href(self):
        """Gets the href of this PagingObject.  # noqa: E501

        A link to the Web API endpoint returning the full result of the request   # noqa: E501

        :return: The href of this PagingObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PagingObject.

        A link to the Web API endpoint returning the full result of the request   # noqa: E501

        :param href: The href of this PagingObject.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def limit(self):
        """Gets the limit of this PagingObject.  # noqa: E501

        The maximum number of items in the response (as set in the query or by default).   # noqa: E501

        :return: The limit of this PagingObject.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PagingObject.

        The maximum number of items in the response (as set in the query or by default).   # noqa: E501

        :param limit: The limit of this PagingObject.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def next(self):
        """Gets the next of this PagingObject.  # noqa: E501

        URL to the next page of items. ( `null` if none)   # noqa: E501

        :return: The next of this PagingObject.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PagingObject.

        URL to the next page of items. ( `null` if none)   # noqa: E501

        :param next: The next of this PagingObject.  # noqa: E501
        :type: str
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")  # noqa: E501

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this PagingObject.  # noqa: E501

        The offset of the items returned (as set in the query or by default)   # noqa: E501

        :return: The offset of this PagingObject.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PagingObject.

        The offset of the items returned (as set in the query or by default)   # noqa: E501

        :param offset: The offset of this PagingObject.  # noqa: E501
        :type: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")  # noqa: E501

        self._offset = offset

    @property
    def previous(self):
        """Gets the previous of this PagingObject.  # noqa: E501

        URL to the previous page of items. ( `null` if none)   # noqa: E501

        :return: The previous of this PagingObject.  # noqa: E501
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this PagingObject.

        URL to the previous page of items. ( `null` if none)   # noqa: E501

        :param previous: The previous of this PagingObject.  # noqa: E501
        :type: str
        """
        if previous is None:
            raise ValueError("Invalid value for `previous`, must not be `None`")  # noqa: E501

        self._previous = previous

    @property
    def total(self):
        """Gets the total of this PagingObject.  # noqa: E501

        The total number of items available to return.   # noqa: E501

        :return: The total of this PagingObject.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagingObject.

        The total number of items available to return.   # noqa: E501

        :param total: The total of this PagingObject.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PagingObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagingObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
