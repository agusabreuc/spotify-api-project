# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimplifiedTrackObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artists': 'list[SimplifiedArtistObject]',
        'available_markets': 'list[str]',
        'disc_number': 'int',
        'duration_ms': 'int',
        'explicit': 'bool',
        'external_urls': 'AllOfSimplifiedTrackObjectExternalUrls',
        'href': 'str',
        'id': 'str',
        'is_playable': 'bool',
        'linked_from': 'AllOfSimplifiedTrackObjectLinkedFrom',
        'restrictions': 'AllOfSimplifiedTrackObjectRestrictions',
        'name': 'str',
        'preview_url': 'str',
        'track_number': 'int',
        'type': 'str',
        'uri': 'str',
        'is_local': 'bool'
    }

    attribute_map = {
        'artists': 'artists',
        'available_markets': 'available_markets',
        'disc_number': 'disc_number',
        'duration_ms': 'duration_ms',
        'explicit': 'explicit',
        'external_urls': 'external_urls',
        'href': 'href',
        'id': 'id',
        'is_playable': 'is_playable',
        'linked_from': 'linked_from',
        'restrictions': 'restrictions',
        'name': 'name',
        'preview_url': 'preview_url',
        'track_number': 'track_number',
        'type': 'type',
        'uri': 'uri',
        'is_local': 'is_local'
    }

    def __init__(self, artists=None, available_markets=None, disc_number=None, duration_ms=None, explicit=None, external_urls=None, href=None, id=None, is_playable=None, linked_from=None, restrictions=None, name=None, preview_url=None, track_number=None, type=None, uri=None, is_local=None):  # noqa: E501
        """SimplifiedTrackObject - a model defined in Swagger"""  # noqa: E501
        self._artists = None
        self._available_markets = None
        self._disc_number = None
        self._duration_ms = None
        self._explicit = None
        self._external_urls = None
        self._href = None
        self._id = None
        self._is_playable = None
        self._linked_from = None
        self._restrictions = None
        self._name = None
        self._preview_url = None
        self._track_number = None
        self._type = None
        self._uri = None
        self._is_local = None
        self.discriminator = None
        if artists is not None:
            self.artists = artists
        if available_markets is not None:
            self.available_markets = available_markets
        if disc_number is not None:
            self.disc_number = disc_number
        if duration_ms is not None:
            self.duration_ms = duration_ms
        if explicit is not None:
            self.explicit = explicit
        if external_urls is not None:
            self.external_urls = external_urls
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if is_playable is not None:
            self.is_playable = is_playable
        if linked_from is not None:
            self.linked_from = linked_from
        if restrictions is not None:
            self.restrictions = restrictions
        if name is not None:
            self.name = name
        if preview_url is not None:
            self.preview_url = preview_url
        if track_number is not None:
            self.track_number = track_number
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri
        if is_local is not None:
            self.is_local = is_local

    @property
    def artists(self):
        """Gets the artists of this SimplifiedTrackObject.  # noqa: E501

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.  # noqa: E501

        :return: The artists of this SimplifiedTrackObject.  # noqa: E501
        :rtype: list[SimplifiedArtistObject]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this SimplifiedTrackObject.

        The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.  # noqa: E501

        :param artists: The artists of this SimplifiedTrackObject.  # noqa: E501
        :type: list[SimplifiedArtistObject]
        """

        self._artists = artists

    @property
    def available_markets(self):
        """Gets the available_markets of this SimplifiedTrackObject.  # noqa: E501

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.   # noqa: E501

        :return: The available_markets of this SimplifiedTrackObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_markets

    @available_markets.setter
    def available_markets(self, available_markets):
        """Sets the available_markets of this SimplifiedTrackObject.

        A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.   # noqa: E501

        :param available_markets: The available_markets of this SimplifiedTrackObject.  # noqa: E501
        :type: list[str]
        """

        self._available_markets = available_markets

    @property
    def disc_number(self):
        """Gets the disc_number of this SimplifiedTrackObject.  # noqa: E501

        The disc number (usually `1` unless the album consists of more than one disc).  # noqa: E501

        :return: The disc_number of this SimplifiedTrackObject.  # noqa: E501
        :rtype: int
        """
        return self._disc_number

    @disc_number.setter
    def disc_number(self, disc_number):
        """Sets the disc_number of this SimplifiedTrackObject.

        The disc number (usually `1` unless the album consists of more than one disc).  # noqa: E501

        :param disc_number: The disc_number of this SimplifiedTrackObject.  # noqa: E501
        :type: int
        """

        self._disc_number = disc_number

    @property
    def duration_ms(self):
        """Gets the duration_ms of this SimplifiedTrackObject.  # noqa: E501

        The track length in milliseconds.  # noqa: E501

        :return: The duration_ms of this SimplifiedTrackObject.  # noqa: E501
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this SimplifiedTrackObject.

        The track length in milliseconds.  # noqa: E501

        :param duration_ms: The duration_ms of this SimplifiedTrackObject.  # noqa: E501
        :type: int
        """

        self._duration_ms = duration_ms

    @property
    def explicit(self):
        """Gets the explicit of this SimplifiedTrackObject.  # noqa: E501

        Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).  # noqa: E501

        :return: The explicit of this SimplifiedTrackObject.  # noqa: E501
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this SimplifiedTrackObject.

        Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).  # noqa: E501

        :param explicit: The explicit of this SimplifiedTrackObject.  # noqa: E501
        :type: bool
        """

        self._explicit = explicit

    @property
    def external_urls(self):
        """Gets the external_urls of this SimplifiedTrackObject.  # noqa: E501

        External URLs for this track.   # noqa: E501

        :return: The external_urls of this SimplifiedTrackObject.  # noqa: E501
        :rtype: AllOfSimplifiedTrackObjectExternalUrls
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this SimplifiedTrackObject.

        External URLs for this track.   # noqa: E501

        :param external_urls: The external_urls of this SimplifiedTrackObject.  # noqa: E501
        :type: AllOfSimplifiedTrackObjectExternalUrls
        """

        self._external_urls = external_urls

    @property
    def href(self):
        """Gets the href of this SimplifiedTrackObject.  # noqa: E501

        A link to the Web API endpoint providing full details of the track.  # noqa: E501

        :return: The href of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this SimplifiedTrackObject.

        A link to the Web API endpoint providing full details of the track.  # noqa: E501

        :param href: The href of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this SimplifiedTrackObject.  # noqa: E501

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.   # noqa: E501

        :return: The id of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimplifiedTrackObject.

        The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.   # noqa: E501

        :param id: The id of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_playable(self):
        """Gets the is_playable of this SimplifiedTrackObject.  # noqa: E501

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.   # noqa: E501

        :return: The is_playable of this SimplifiedTrackObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_playable

    @is_playable.setter
    def is_playable(self, is_playable):
        """Sets the is_playable of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.   # noqa: E501

        :param is_playable: The is_playable of this SimplifiedTrackObject.  # noqa: E501
        :type: bool
        """

        self._is_playable = is_playable

    @property
    def linked_from(self):
        """Gets the linked_from of this SimplifiedTrackObject.  # noqa: E501

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.  # noqa: E501

        :return: The linked_from of this SimplifiedTrackObject.  # noqa: E501
        :rtype: AllOfSimplifiedTrackObjectLinkedFrom
        """
        return self._linked_from

    @linked_from.setter
    def linked_from(self, linked_from):
        """Sets the linked_from of this SimplifiedTrackObject.

        Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.  # noqa: E501

        :param linked_from: The linked_from of this SimplifiedTrackObject.  # noqa: E501
        :type: AllOfSimplifiedTrackObjectLinkedFrom
        """

        self._linked_from = linked_from

    @property
    def restrictions(self):
        """Gets the restrictions of this SimplifiedTrackObject.  # noqa: E501

        Included in the response when a content restriction is applied.   # noqa: E501

        :return: The restrictions of this SimplifiedTrackObject.  # noqa: E501
        :rtype: AllOfSimplifiedTrackObjectRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SimplifiedTrackObject.

        Included in the response when a content restriction is applied.   # noqa: E501

        :param restrictions: The restrictions of this SimplifiedTrackObject.  # noqa: E501
        :type: AllOfSimplifiedTrackObjectRestrictions
        """

        self._restrictions = restrictions

    @property
    def name(self):
        """Gets the name of this SimplifiedTrackObject.  # noqa: E501

        The name of the track.  # noqa: E501

        :return: The name of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimplifiedTrackObject.

        The name of the track.  # noqa: E501

        :param name: The name of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preview_url(self):
        """Gets the preview_url of this SimplifiedTrackObject.  # noqa: E501

        A URL to a 30 second preview (MP3 format) of the track.   # noqa: E501

        :return: The preview_url of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this SimplifiedTrackObject.

        A URL to a 30 second preview (MP3 format) of the track.   # noqa: E501

        :param preview_url: The preview_url of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._preview_url = preview_url

    @property
    def track_number(self):
        """Gets the track_number of this SimplifiedTrackObject.  # noqa: E501

        The number of the track. If an album has several discs, the track number is the number on the specified disc.   # noqa: E501

        :return: The track_number of this SimplifiedTrackObject.  # noqa: E501
        :rtype: int
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this SimplifiedTrackObject.

        The number of the track. If an album has several discs, the track number is the number on the specified disc.   # noqa: E501

        :param track_number: The track_number of this SimplifiedTrackObject.  # noqa: E501
        :type: int
        """

        self._track_number = track_number

    @property
    def type(self):
        """Gets the type of this SimplifiedTrackObject.  # noqa: E501

        The object type: \"track\".   # noqa: E501

        :return: The type of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimplifiedTrackObject.

        The object type: \"track\".   # noqa: E501

        :param type: The type of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this SimplifiedTrackObject.  # noqa: E501

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.   # noqa: E501

        :return: The uri of this SimplifiedTrackObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SimplifiedTrackObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.   # noqa: E501

        :param uri: The uri of this SimplifiedTrackObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def is_local(self):
        """Gets the is_local of this SimplifiedTrackObject.  # noqa: E501

        Whether or not the track is from a local file.   # noqa: E501

        :return: The is_local of this SimplifiedTrackObject.  # noqa: E501
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this SimplifiedTrackObject.

        Whether or not the track is from a local file.   # noqa: E501

        :param is_local: The is_local of this SimplifiedTrackObject.  # noqa: E501
        :type: bool
        """

        self._is_local = is_local

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimplifiedTrackObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimplifiedTrackObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
