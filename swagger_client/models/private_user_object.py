# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PrivateUserObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'display_name': 'str',
        'email': 'str',
        'explicit_content': 'AllOfPrivateUserObjectExplicitContent',
        'external_urls': 'AllOfPrivateUserObjectExternalUrls',
        'followers': 'AllOfPrivateUserObjectFollowers',
        'href': 'str',
        'id': 'str',
        'images': 'list[ImageObject]',
        'product': 'str',
        'type': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'country': 'country',
        'display_name': 'display_name',
        'email': 'email',
        'explicit_content': 'explicit_content',
        'external_urls': 'external_urls',
        'followers': 'followers',
        'href': 'href',
        'id': 'id',
        'images': 'images',
        'product': 'product',
        'type': 'type',
        'uri': 'uri'
    }

    def __init__(self, country=None, display_name=None, email=None, explicit_content=None, external_urls=None, followers=None, href=None, id=None, images=None, product=None, type=None, uri=None):  # noqa: E501
        """PrivateUserObject - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._display_name = None
        self._email = None
        self._explicit_content = None
        self._external_urls = None
        self._followers = None
        self._href = None
        self._id = None
        self._images = None
        self._product = None
        self._type = None
        self._uri = None
        self.discriminator = None
        if country is not None:
            self.country = country
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if explicit_content is not None:
            self.explicit_content = explicit_content
        if external_urls is not None:
            self.external_urls = external_urls
        if followers is not None:
            self.followers = followers
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if product is not None:
            self.product = product
        if type is not None:
            self.type = type
        if uri is not None:
            self.uri = uri

    @property
    def country(self):
        """Gets the country of this PrivateUserObject.  # noqa: E501

        The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :return: The country of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PrivateUserObject.

        The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :param country: The country of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def display_name(self):
        """Gets the display_name of this PrivateUserObject.  # noqa: E501

        The name displayed on the user's profile. `null` if not available.   # noqa: E501

        :return: The display_name of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PrivateUserObject.

        The name displayed on the user's profile. `null` if not available.   # noqa: E501

        :param display_name: The display_name of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this PrivateUserObject.  # noqa: E501

        The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :return: The email of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PrivateUserObject.

        The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :param email: The email of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def explicit_content(self):
        """Gets the explicit_content of this PrivateUserObject.  # noqa: E501

        The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :return: The explicit_content of this PrivateUserObject.  # noqa: E501
        :rtype: AllOfPrivateUserObjectExplicitContent
        """
        return self._explicit_content

    @explicit_content.setter
    def explicit_content(self, explicit_content):
        """Sets the explicit_content of this PrivateUserObject.

        The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :param explicit_content: The explicit_content of this PrivateUserObject.  # noqa: E501
        :type: AllOfPrivateUserObjectExplicitContent
        """

        self._explicit_content = explicit_content

    @property
    def external_urls(self):
        """Gets the external_urls of this PrivateUserObject.  # noqa: E501

        Known external URLs for this user.  # noqa: E501

        :return: The external_urls of this PrivateUserObject.  # noqa: E501
        :rtype: AllOfPrivateUserObjectExternalUrls
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls):
        """Sets the external_urls of this PrivateUserObject.

        Known external URLs for this user.  # noqa: E501

        :param external_urls: The external_urls of this PrivateUserObject.  # noqa: E501
        :type: AllOfPrivateUserObjectExternalUrls
        """

        self._external_urls = external_urls

    @property
    def followers(self):
        """Gets the followers of this PrivateUserObject.  # noqa: E501

        Information about the followers of the user.  # noqa: E501

        :return: The followers of this PrivateUserObject.  # noqa: E501
        :rtype: AllOfPrivateUserObjectFollowers
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this PrivateUserObject.

        Information about the followers of the user.  # noqa: E501

        :param followers: The followers of this PrivateUserObject.  # noqa: E501
        :type: AllOfPrivateUserObjectFollowers
        """

        self._followers = followers

    @property
    def href(self):
        """Gets the href of this PrivateUserObject.  # noqa: E501

        A link to the Web API endpoint for this user.   # noqa: E501

        :return: The href of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PrivateUserObject.

        A link to the Web API endpoint for this user.   # noqa: E501

        :param href: The href of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this PrivateUserObject.  # noqa: E501

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.   # noqa: E501

        :return: The id of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateUserObject.

        The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.   # noqa: E501

        :param id: The id of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this PrivateUserObject.  # noqa: E501

        The user's profile image.  # noqa: E501

        :return: The images of this PrivateUserObject.  # noqa: E501
        :rtype: list[ImageObject]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PrivateUserObject.

        The user's profile image.  # noqa: E501

        :param images: The images of this PrivateUserObject.  # noqa: E501
        :type: list[ImageObject]
        """

        self._images = images

    @property
    def product(self):
        """Gets the product of this PrivateUserObject.  # noqa: E501

        The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :return: The product of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PrivateUserObject.

        The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._   # noqa: E501

        :param product: The product of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def type(self):
        """Gets the type of this PrivateUserObject.  # noqa: E501

        The object type: \"user\"   # noqa: E501

        :return: The type of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrivateUserObject.

        The object type: \"user\"   # noqa: E501

        :param type: The type of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this PrivateUserObject.  # noqa: E501

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.   # noqa: E501

        :return: The uri of this PrivateUserObject.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PrivateUserObject.

        The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.   # noqa: E501

        :param uri: The uri of this PrivateUserObject.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrivateUserObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivateUserObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
