# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SectionObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'float',
        'duration': 'float',
        'confidence': 'float',
        'loudness': 'float',
        'tempo': 'float',
        'tempo_confidence': 'float',
        'key': 'int',
        'key_confidence': 'float',
        'mode': 'float',
        'mode_confidence': 'float',
        'time_signature': 'TimeSignature',
        'time_signature_confidence': 'float'
    }

    attribute_map = {
        'start': 'start',
        'duration': 'duration',
        'confidence': 'confidence',
        'loudness': 'loudness',
        'tempo': 'tempo',
        'tempo_confidence': 'tempo_confidence',
        'key': 'key',
        'key_confidence': 'key_confidence',
        'mode': 'mode',
        'mode_confidence': 'mode_confidence',
        'time_signature': 'time_signature',
        'time_signature_confidence': 'time_signature_confidence'
    }

    def __init__(self, start=None, duration=None, confidence=None, loudness=None, tempo=None, tempo_confidence=None, key=None, key_confidence=None, mode=None, mode_confidence=None, time_signature=None, time_signature_confidence=None):  # noqa: E501
        """SectionObject - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._duration = None
        self._confidence = None
        self._loudness = None
        self._tempo = None
        self._tempo_confidence = None
        self._key = None
        self._key_confidence = None
        self._mode = None
        self._mode_confidence = None
        self._time_signature = None
        self._time_signature_confidence = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration
        if confidence is not None:
            self.confidence = confidence
        if loudness is not None:
            self.loudness = loudness
        if tempo is not None:
            self.tempo = tempo
        if tempo_confidence is not None:
            self.tempo_confidence = tempo_confidence
        if key is not None:
            self.key = key
        if key_confidence is not None:
            self.key_confidence = key_confidence
        if mode is not None:
            self.mode = mode
        if mode_confidence is not None:
            self.mode_confidence = mode_confidence
        if time_signature is not None:
            self.time_signature = time_signature
        if time_signature_confidence is not None:
            self.time_signature_confidence = time_signature_confidence

    @property
    def start(self):
        """Gets the start of this SectionObject.  # noqa: E501

        The starting point (in seconds) of the section.  # noqa: E501

        :return: The start of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SectionObject.

        The starting point (in seconds) of the section.  # noqa: E501

        :param start: The start of this SectionObject.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this SectionObject.  # noqa: E501

        The duration (in seconds) of the section.  # noqa: E501

        :return: The duration of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SectionObject.

        The duration (in seconds) of the section.  # noqa: E501

        :param duration: The duration of this SectionObject.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def confidence(self):
        """Gets the confidence of this SectionObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".  # noqa: E501

        :return: The confidence of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".  # noqa: E501

        :param confidence: The confidence of this SectionObject.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def loudness(self):
        """Gets the loudness of this SectionObject.  # noqa: E501

        The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.  # noqa: E501

        :return: The loudness of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._loudness

    @loudness.setter
    def loudness(self, loudness):
        """Sets the loudness of this SectionObject.

        The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.  # noqa: E501

        :param loudness: The loudness of this SectionObject.  # noqa: E501
        :type: float
        """

        self._loudness = loudness

    @property
    def tempo(self):
        """Gets the tempo of this SectionObject.  # noqa: E501

        The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.  # noqa: E501

        :return: The tempo of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this SectionObject.

        The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.  # noqa: E501

        :param tempo: The tempo of this SectionObject.  # noqa: E501
        :type: float
        """

        self._tempo = tempo

    @property
    def tempo_confidence(self):
        """Gets the tempo_confidence of this SectionObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.  # noqa: E501

        :return: The tempo_confidence of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._tempo_confidence

    @tempo_confidence.setter
    def tempo_confidence(self, tempo_confidence):
        """Sets the tempo_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.  # noqa: E501

        :param tempo_confidence: The tempo_confidence of this SectionObject.  # noqa: E501
        :type: float
        """

        self._tempo_confidence = tempo_confidence

    @property
    def key(self):
        """Gets the key of this SectionObject.  # noqa: E501

        The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.  # noqa: E501

        :return: The key of this SectionObject.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SectionObject.

        The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.  # noqa: E501

        :param key: The key of this SectionObject.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def key_confidence(self):
        """Gets the key_confidence of this SectionObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.  # noqa: E501

        :return: The key_confidence of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._key_confidence

    @key_confidence.setter
    def key_confidence(self, key_confidence):
        """Sets the key_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.  # noqa: E501

        :param key_confidence: The key_confidence of this SectionObject.  # noqa: E501
        :type: float
        """

        self._key_confidence = key_confidence

    @property
    def mode(self):
        """Gets the mode of this SectionObject.  # noqa: E501

        Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.  # noqa: E501

        :return: The mode of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SectionObject.

        Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.  # noqa: E501

        :param mode: The mode of this SectionObject.  # noqa: E501
        :type: float
        """
        allowed_values = [-1, 0, 1]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def mode_confidence(self):
        """Gets the mode_confidence of this SectionObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.  # noqa: E501

        :return: The mode_confidence of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._mode_confidence

    @mode_confidence.setter
    def mode_confidence(self, mode_confidence):
        """Sets the mode_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `mode`.  # noqa: E501

        :param mode_confidence: The mode_confidence of this SectionObject.  # noqa: E501
        :type: float
        """

        self._mode_confidence = mode_confidence

    @property
    def time_signature(self):
        """Gets the time_signature of this SectionObject.  # noqa: E501


        :return: The time_signature of this SectionObject.  # noqa: E501
        :rtype: TimeSignature
        """
        return self._time_signature

    @time_signature.setter
    def time_signature(self, time_signature):
        """Sets the time_signature of this SectionObject.


        :param time_signature: The time_signature of this SectionObject.  # noqa: E501
        :type: TimeSignature
        """

        self._time_signature = time_signature

    @property
    def time_signature_confidence(self):
        """Gets the time_signature_confidence of this SectionObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.  # noqa: E501

        :return: The time_signature_confidence of this SectionObject.  # noqa: E501
        :rtype: float
        """
        return self._time_signature_confidence

    @time_signature_confidence.setter
    def time_signature_confidence(self, time_signature_confidence):
        """Sets the time_signature_confidence of this SectionObject.

        The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.  # noqa: E501

        :param time_signature_confidence: The time_signature_confidence of this SectionObject.  # noqa: E501
        :type: float
        """

        self._time_signature_confidence = time_signature_confidence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectionObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
