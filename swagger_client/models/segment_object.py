# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SegmentObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'float',
        'duration': 'float',
        'confidence': 'float',
        'loudness_start': 'float',
        'loudness_max': 'float',
        'loudness_max_time': 'float',
        'loudness_end': 'float',
        'pitches': 'list[float]',
        'timbre': 'list[float]'
    }

    attribute_map = {
        'start': 'start',
        'duration': 'duration',
        'confidence': 'confidence',
        'loudness_start': 'loudness_start',
        'loudness_max': 'loudness_max',
        'loudness_max_time': 'loudness_max_time',
        'loudness_end': 'loudness_end',
        'pitches': 'pitches',
        'timbre': 'timbre'
    }

    def __init__(self, start=None, duration=None, confidence=None, loudness_start=None, loudness_max=None, loudness_max_time=None, loudness_end=None, pitches=None, timbre=None):  # noqa: E501
        """SegmentObject - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._duration = None
        self._confidence = None
        self._loudness_start = None
        self._loudness_max = None
        self._loudness_max_time = None
        self._loudness_end = None
        self._pitches = None
        self._timbre = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if duration is not None:
            self.duration = duration
        if confidence is not None:
            self.confidence = confidence
        if loudness_start is not None:
            self.loudness_start = loudness_start
        if loudness_max is not None:
            self.loudness_max = loudness_max
        if loudness_max_time is not None:
            self.loudness_max_time = loudness_max_time
        if loudness_end is not None:
            self.loudness_end = loudness_end
        if pitches is not None:
            self.pitches = pitches
        if timbre is not None:
            self.timbre = timbre

    @property
    def start(self):
        """Gets the start of this SegmentObject.  # noqa: E501

        The starting point (in seconds) of the segment.  # noqa: E501

        :return: The start of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SegmentObject.

        The starting point (in seconds) of the segment.  # noqa: E501

        :param start: The start of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._start = start

    @property
    def duration(self):
        """Gets the duration of this SegmentObject.  # noqa: E501

        The duration (in seconds) of the segment.  # noqa: E501

        :return: The duration of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SegmentObject.

        The duration (in seconds) of the segment.  # noqa: E501

        :param duration: The duration of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def confidence(self):
        """Gets the confidence of this SegmentObject.  # noqa: E501

        The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.   # noqa: E501

        :return: The confidence of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this SegmentObject.

        The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.   # noqa: E501

        :param confidence: The confidence of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def loudness_start(self):
        """Gets the loudness_start of this SegmentObject.  # noqa: E501

        The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.  # noqa: E501

        :return: The loudness_start of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._loudness_start

    @loudness_start.setter
    def loudness_start(self, loudness_start):
        """Sets the loudness_start of this SegmentObject.

        The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.  # noqa: E501

        :param loudness_start: The loudness_start of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._loudness_start = loudness_start

    @property
    def loudness_max(self):
        """Gets the loudness_max of this SegmentObject.  # noqa: E501

        The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.  # noqa: E501

        :return: The loudness_max of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._loudness_max

    @loudness_max.setter
    def loudness_max(self, loudness_max):
        """Sets the loudness_max of this SegmentObject.

        The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.  # noqa: E501

        :param loudness_max: The loudness_max of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._loudness_max = loudness_max

    @property
    def loudness_max_time(self):
        """Gets the loudness_max_time of this SegmentObject.  # noqa: E501

        The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.  # noqa: E501

        :return: The loudness_max_time of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._loudness_max_time

    @loudness_max_time.setter
    def loudness_max_time(self, loudness_max_time):
        """Sets the loudness_max_time of this SegmentObject.

        The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.  # noqa: E501

        :param loudness_max_time: The loudness_max_time of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._loudness_max_time = loudness_max_time

    @property
    def loudness_end(self):
        """Gets the loudness_end of this SegmentObject.  # noqa: E501

        The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.  # noqa: E501

        :return: The loudness_end of this SegmentObject.  # noqa: E501
        :rtype: float
        """
        return self._loudness_end

    @loudness_end.setter
    def loudness_end(self, loudness_end):
        """Sets the loudness_end of this SegmentObject.

        The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.  # noqa: E501

        :param loudness_end: The loudness_end of this SegmentObject.  # noqa: E501
        :type: float
        """

        self._loudness_end = loudness_end

    @property
    def pitches(self):
        """Gets the pitches of this SegmentObject.  # noqa: E501

        Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)   # noqa: E501

        :return: The pitches of this SegmentObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._pitches

    @pitches.setter
    def pitches(self, pitches):
        """Sets the pitches of this SegmentObject.

        Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)   # noqa: E501

        :param pitches: The pitches of this SegmentObject.  # noqa: E501
        :type: list[float]
        """

        self._pitches = pitches

    @property
    def timbre(self):
        """Gets the timbre of this SegmentObject.  # noqa: E501

        Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.   # noqa: E501

        :return: The timbre of this SegmentObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._timbre

    @timbre.setter
    def timbre(self, timbre):
        """Sets the timbre of this SegmentObject.

        Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.   # noqa: E501

        :param timbre: The timbre of this SegmentObject.  # noqa: E501
        :type: list[float]
        """

        self._timbre = timbre

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
