# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tracks': 'PagingTrackObject',
        'artists': 'PagingArtistObject',
        'albums': 'PagingSimplifiedAlbumObject',
        'playlists': 'PagingPlaylistObject',
        'shows': 'PagingSimplifiedShowObject',
        'episodes': 'PagingSimplifiedEpisodeObject',
        'audiobooks': 'PagingSimplifiedAudiobookObject'
    }

    attribute_map = {
        'tracks': 'tracks',
        'artists': 'artists',
        'albums': 'albums',
        'playlists': 'playlists',
        'shows': 'shows',
        'episodes': 'episodes',
        'audiobooks': 'audiobooks'
    }

    def __init__(self, tracks=None, artists=None, albums=None, playlists=None, shows=None, episodes=None, audiobooks=None):  # noqa: E501
        """InlineResponse2007 - a model defined in Swagger"""  # noqa: E501
        self._tracks = None
        self._artists = None
        self._albums = None
        self._playlists = None
        self._shows = None
        self._episodes = None
        self._audiobooks = None
        self.discriminator = None
        if tracks is not None:
            self.tracks = tracks
        if artists is not None:
            self.artists = artists
        if albums is not None:
            self.albums = albums
        if playlists is not None:
            self.playlists = playlists
        if shows is not None:
            self.shows = shows
        if episodes is not None:
            self.episodes = episodes
        if audiobooks is not None:
            self.audiobooks = audiobooks

    @property
    def tracks(self):
        """Gets the tracks of this InlineResponse2007.  # noqa: E501


        :return: The tracks of this InlineResponse2007.  # noqa: E501
        :rtype: PagingTrackObject
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this InlineResponse2007.


        :param tracks: The tracks of this InlineResponse2007.  # noqa: E501
        :type: PagingTrackObject
        """

        self._tracks = tracks

    @property
    def artists(self):
        """Gets the artists of this InlineResponse2007.  # noqa: E501


        :return: The artists of this InlineResponse2007.  # noqa: E501
        :rtype: PagingArtistObject
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this InlineResponse2007.


        :param artists: The artists of this InlineResponse2007.  # noqa: E501
        :type: PagingArtistObject
        """

        self._artists = artists

    @property
    def albums(self):
        """Gets the albums of this InlineResponse2007.  # noqa: E501


        :return: The albums of this InlineResponse2007.  # noqa: E501
        :rtype: PagingSimplifiedAlbumObject
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this InlineResponse2007.


        :param albums: The albums of this InlineResponse2007.  # noqa: E501
        :type: PagingSimplifiedAlbumObject
        """

        self._albums = albums

    @property
    def playlists(self):
        """Gets the playlists of this InlineResponse2007.  # noqa: E501


        :return: The playlists of this InlineResponse2007.  # noqa: E501
        :rtype: PagingPlaylistObject
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists):
        """Sets the playlists of this InlineResponse2007.


        :param playlists: The playlists of this InlineResponse2007.  # noqa: E501
        :type: PagingPlaylistObject
        """

        self._playlists = playlists

    @property
    def shows(self):
        """Gets the shows of this InlineResponse2007.  # noqa: E501


        :return: The shows of this InlineResponse2007.  # noqa: E501
        :rtype: PagingSimplifiedShowObject
        """
        return self._shows

    @shows.setter
    def shows(self, shows):
        """Sets the shows of this InlineResponse2007.


        :param shows: The shows of this InlineResponse2007.  # noqa: E501
        :type: PagingSimplifiedShowObject
        """

        self._shows = shows

    @property
    def episodes(self):
        """Gets the episodes of this InlineResponse2007.  # noqa: E501


        :return: The episodes of this InlineResponse2007.  # noqa: E501
        :rtype: PagingSimplifiedEpisodeObject
        """
        return self._episodes

    @episodes.setter
    def episodes(self, episodes):
        """Sets the episodes of this InlineResponse2007.


        :param episodes: The episodes of this InlineResponse2007.  # noqa: E501
        :type: PagingSimplifiedEpisodeObject
        """

        self._episodes = episodes

    @property
    def audiobooks(self):
        """Gets the audiobooks of this InlineResponse2007.  # noqa: E501


        :return: The audiobooks of this InlineResponse2007.  # noqa: E501
        :rtype: PagingSimplifiedAudiobookObject
        """
        return self._audiobooks

    @audiobooks.setter
    def audiobooks(self, audiobooks):
        """Sets the audiobooks of this InlineResponse2007.


        :param audiobooks: The audiobooks of this InlineResponse2007.  # noqa: E501
        :type: PagingSimplifiedAudiobookObject
        """

        self._audiobooks = audiobooks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
