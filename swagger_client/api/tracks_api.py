# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TracksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_tracks_to_playlist(self, playlist_id, **kwargs):  # noqa: E501
        """Add Items to Playlist   # noqa: E501

        Add one or more items to a user's playlist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tracks_to_playlist(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param dict(str, object) body:
        :param int position:
        :param str uris:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tracks_to_playlist_with_http_info(playlist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tracks_to_playlist_with_http_info(playlist_id, **kwargs)  # noqa: E501
            return data

    def add_tracks_to_playlist_with_http_info(self, playlist_id, **kwargs):  # noqa: E501
        """Add Items to Playlist   # noqa: E501

        Add one or more items to a user's playlist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tracks_to_playlist_with_http_info(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param dict(str, object) body:
        :param int position:
        :param str uris:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'body', 'position', 'uris']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tracks_to_playlist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `add_tracks_to_playlist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlist_id'] = params['playlist_id']  # noqa: E501

        query_params = []
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/playlists/{playlist_id}/tracks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_users_saved_tracks(self, ids, **kwargs):  # noqa: E501
        """Check User's Saved Tracks   # noqa: E501

        Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_users_saved_tracks(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :return: list[bool]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_users_saved_tracks_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.check_users_saved_tracks_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def check_users_saved_tracks_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Check User's Saved Tracks   # noqa: E501

        Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_users_saved_tracks_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :return: list[bool]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_users_saved_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `check_users_saved_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/me/tracks/contains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[bool]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_an_albums_tracks(self, id, **kwargs):  # noqa: E501
        """Get Album Tracks   # noqa: E501

        Get Spotify catalog information about an albumâ€™s tracks. Optional parameters can be used to limit the number of tracks returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_an_albums_tracks(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :param int limit:
        :param int offset:
        :return: PagingSimplifiedTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_an_albums_tracks_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_an_albums_tracks_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_an_albums_tracks_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Album Tracks   # noqa: E501

        Get Spotify catalog information about an albumâ€™s tracks. Optional parameters can be used to limit the number of tracks returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_an_albums_tracks_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :param int limit:
        :param int offset:
        :return: PagingSimplifiedTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'market', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_an_albums_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_an_albums_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/albums/{id}/tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagingSimplifiedTrackObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_an_artists_top_tracks(self, id, **kwargs):  # noqa: E501
        """Get Artist's Top Tracks   # noqa: E501

        Get Spotify catalog information about an artist's top tracks by country.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_an_artists_top_tracks(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_an_artists_top_tracks_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_an_artists_top_tracks_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_an_artists_top_tracks_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Artist's Top Tracks   # noqa: E501

        Get Spotify catalog information about an artist's top tracks by country.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_an_artists_top_tracks_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_an_artists_top_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_an_artists_top_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/artists/{id}/top-tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audio_analysis(self, id, **kwargs):  # noqa: E501
        """Get Track's Audio Analysis   # noqa: E501

        Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_analysis(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AudioAnalysisObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audio_analysis_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_audio_analysis_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_audio_analysis_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Track's Audio Analysis   # noqa: E501

        Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_analysis_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AudioAnalysisObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audio_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_audio_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/audio-analysis/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AudioAnalysisObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audio_features(self, id, **kwargs):  # noqa: E501
        """Get Track's Audio Features   # noqa: E501

        Get audio feature information for a single track identified by its unique Spotify ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_features(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AudioFeaturesObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audio_features_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_audio_features_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_audio_features_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Track's Audio Features   # noqa: E501

        Get audio feature information for a single track identified by its unique Spotify ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audio_features_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AudioFeaturesObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audio_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_audio_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/audio-features/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AudioFeaturesObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_playlists_tracks(self, playlist_id, **kwargs):  # noqa: E501
        """Get Playlist Items   # noqa: E501

        Get full details of the items of a playlist owned by a Spotify user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playlists_tracks(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param str market:
        :param str fields:
        :param int limit:
        :param int offset:
        :param str additional_types:
        :return: PagingPlaylistTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_playlists_tracks_with_http_info(playlist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_playlists_tracks_with_http_info(playlist_id, **kwargs)  # noqa: E501
            return data

    def get_playlists_tracks_with_http_info(self, playlist_id, **kwargs):  # noqa: E501
        """Get Playlist Items   # noqa: E501

        Get full details of the items of a playlist owned by a Spotify user.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_playlists_tracks_with_http_info(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param str market:
        :param str fields:
        :param int limit:
        :param int offset:
        :param str additional_types:
        :return: PagingPlaylistTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'market', 'fields', 'limit', 'offset', 'additional_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_playlists_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `get_playlists_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlist_id'] = params['playlist_id']  # noqa: E501

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'additional_types' in params:
            query_params.append(('additional_types', params['additional_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/playlists/{playlist_id}/tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagingPlaylistTrackObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommendations(self, seed_artists, seed_genres, seed_tracks, **kwargs):  # noqa: E501
        """Get Recommendations   # noqa: E501

        Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations(seed_artists, seed_genres, seed_tracks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str seed_artists: (required)
        :param str seed_genres: (required)
        :param str seed_tracks: (required)
        :param int limit:
        :param str market:
        :param float min_acousticness:
        :param float max_acousticness:
        :param float target_acousticness:
        :param float min_danceability:
        :param float max_danceability:
        :param float target_danceability:
        :param int min_duration_ms:
        :param int max_duration_ms:
        :param int target_duration_ms:
        :param float min_energy:
        :param float max_energy:
        :param float target_energy:
        :param float min_instrumentalness:
        :param float max_instrumentalness:
        :param float target_instrumentalness:
        :param int min_key:
        :param int max_key:
        :param int target_key:
        :param float min_liveness:
        :param float max_liveness:
        :param float target_liveness:
        :param float min_loudness:
        :param float max_loudness:
        :param float target_loudness:
        :param int min_mode:
        :param int max_mode:
        :param int target_mode:
        :param int min_popularity:
        :param int max_popularity:
        :param int target_popularity:
        :param float min_speechiness:
        :param float max_speechiness:
        :param float target_speechiness:
        :param float min_tempo:
        :param float max_tempo:
        :param float target_tempo:
        :param int min_time_signature:
        :param int max_time_signature:
        :param int target_time_signature:
        :param float min_valence:
        :param float max_valence:
        :param float target_valence:
        :return: RecommendationsObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommendations_with_http_info(seed_artists, seed_genres, seed_tracks, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommendations_with_http_info(seed_artists, seed_genres, seed_tracks, **kwargs)  # noqa: E501
            return data

    def get_recommendations_with_http_info(self, seed_artists, seed_genres, seed_tracks, **kwargs):  # noqa: E501
        """Get Recommendations   # noqa: E501

        Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommendations_with_http_info(seed_artists, seed_genres, seed_tracks, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str seed_artists: (required)
        :param str seed_genres: (required)
        :param str seed_tracks: (required)
        :param int limit:
        :param str market:
        :param float min_acousticness:
        :param float max_acousticness:
        :param float target_acousticness:
        :param float min_danceability:
        :param float max_danceability:
        :param float target_danceability:
        :param int min_duration_ms:
        :param int max_duration_ms:
        :param int target_duration_ms:
        :param float min_energy:
        :param float max_energy:
        :param float target_energy:
        :param float min_instrumentalness:
        :param float max_instrumentalness:
        :param float target_instrumentalness:
        :param int min_key:
        :param int max_key:
        :param int target_key:
        :param float min_liveness:
        :param float max_liveness:
        :param float target_liveness:
        :param float min_loudness:
        :param float max_loudness:
        :param float target_loudness:
        :param int min_mode:
        :param int max_mode:
        :param int target_mode:
        :param int min_popularity:
        :param int max_popularity:
        :param int target_popularity:
        :param float min_speechiness:
        :param float max_speechiness:
        :param float target_speechiness:
        :param float min_tempo:
        :param float max_tempo:
        :param float target_tempo:
        :param int min_time_signature:
        :param int max_time_signature:
        :param int target_time_signature:
        :param float min_valence:
        :param float max_valence:
        :param float target_valence:
        :return: RecommendationsObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seed_artists', 'seed_genres', 'seed_tracks', 'limit', 'market', 'min_acousticness', 'max_acousticness', 'target_acousticness', 'min_danceability', 'max_danceability', 'target_danceability', 'min_duration_ms', 'max_duration_ms', 'target_duration_ms', 'min_energy', 'max_energy', 'target_energy', 'min_instrumentalness', 'max_instrumentalness', 'target_instrumentalness', 'min_key', 'max_key', 'target_key', 'min_liveness', 'max_liveness', 'target_liveness', 'min_loudness', 'max_loudness', 'target_loudness', 'min_mode', 'max_mode', 'target_mode', 'min_popularity', 'max_popularity', 'target_popularity', 'min_speechiness', 'max_speechiness', 'target_speechiness', 'min_tempo', 'max_tempo', 'target_tempo', 'min_time_signature', 'max_time_signature', 'target_time_signature', 'min_valence', 'max_valence', 'target_valence']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommendations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seed_artists' is set
        if ('seed_artists' not in params or
                params['seed_artists'] is None):
            raise ValueError("Missing the required parameter `seed_artists` when calling `get_recommendations`")  # noqa: E501
        # verify the required parameter 'seed_genres' is set
        if ('seed_genres' not in params or
                params['seed_genres'] is None):
            raise ValueError("Missing the required parameter `seed_genres` when calling `get_recommendations`")  # noqa: E501
        # verify the required parameter 'seed_tracks' is set
        if ('seed_tracks' not in params or
                params['seed_tracks'] is None):
            raise ValueError("Missing the required parameter `seed_tracks` when calling `get_recommendations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'seed_artists' in params:
            query_params.append(('seed_artists', params['seed_artists']))  # noqa: E501
        if 'seed_genres' in params:
            query_params.append(('seed_genres', params['seed_genres']))  # noqa: E501
        if 'seed_tracks' in params:
            query_params.append(('seed_tracks', params['seed_tracks']))  # noqa: E501
        if 'min_acousticness' in params:
            query_params.append(('min_acousticness', params['min_acousticness']))  # noqa: E501
        if 'max_acousticness' in params:
            query_params.append(('max_acousticness', params['max_acousticness']))  # noqa: E501
        if 'target_acousticness' in params:
            query_params.append(('target_acousticness', params['target_acousticness']))  # noqa: E501
        if 'min_danceability' in params:
            query_params.append(('min_danceability', params['min_danceability']))  # noqa: E501
        if 'max_danceability' in params:
            query_params.append(('max_danceability', params['max_danceability']))  # noqa: E501
        if 'target_danceability' in params:
            query_params.append(('target_danceability', params['target_danceability']))  # noqa: E501
        if 'min_duration_ms' in params:
            query_params.append(('min_duration_ms', params['min_duration_ms']))  # noqa: E501
        if 'max_duration_ms' in params:
            query_params.append(('max_duration_ms', params['max_duration_ms']))  # noqa: E501
        if 'target_duration_ms' in params:
            query_params.append(('target_duration_ms', params['target_duration_ms']))  # noqa: E501
        if 'min_energy' in params:
            query_params.append(('min_energy', params['min_energy']))  # noqa: E501
        if 'max_energy' in params:
            query_params.append(('max_energy', params['max_energy']))  # noqa: E501
        if 'target_energy' in params:
            query_params.append(('target_energy', params['target_energy']))  # noqa: E501
        if 'min_instrumentalness' in params:
            query_params.append(('min_instrumentalness', params['min_instrumentalness']))  # noqa: E501
        if 'max_instrumentalness' in params:
            query_params.append(('max_instrumentalness', params['max_instrumentalness']))  # noqa: E501
        if 'target_instrumentalness' in params:
            query_params.append(('target_instrumentalness', params['target_instrumentalness']))  # noqa: E501
        if 'min_key' in params:
            query_params.append(('min_key', params['min_key']))  # noqa: E501
        if 'max_key' in params:
            query_params.append(('max_key', params['max_key']))  # noqa: E501
        if 'target_key' in params:
            query_params.append(('target_key', params['target_key']))  # noqa: E501
        if 'min_liveness' in params:
            query_params.append(('min_liveness', params['min_liveness']))  # noqa: E501
        if 'max_liveness' in params:
            query_params.append(('max_liveness', params['max_liveness']))  # noqa: E501
        if 'target_liveness' in params:
            query_params.append(('target_liveness', params['target_liveness']))  # noqa: E501
        if 'min_loudness' in params:
            query_params.append(('min_loudness', params['min_loudness']))  # noqa: E501
        if 'max_loudness' in params:
            query_params.append(('max_loudness', params['max_loudness']))  # noqa: E501
        if 'target_loudness' in params:
            query_params.append(('target_loudness', params['target_loudness']))  # noqa: E501
        if 'min_mode' in params:
            query_params.append(('min_mode', params['min_mode']))  # noqa: E501
        if 'max_mode' in params:
            query_params.append(('max_mode', params['max_mode']))  # noqa: E501
        if 'target_mode' in params:
            query_params.append(('target_mode', params['target_mode']))  # noqa: E501
        if 'min_popularity' in params:
            query_params.append(('min_popularity', params['min_popularity']))  # noqa: E501
        if 'max_popularity' in params:
            query_params.append(('max_popularity', params['max_popularity']))  # noqa: E501
        if 'target_popularity' in params:
            query_params.append(('target_popularity', params['target_popularity']))  # noqa: E501
        if 'min_speechiness' in params:
            query_params.append(('min_speechiness', params['min_speechiness']))  # noqa: E501
        if 'max_speechiness' in params:
            query_params.append(('max_speechiness', params['max_speechiness']))  # noqa: E501
        if 'target_speechiness' in params:
            query_params.append(('target_speechiness', params['target_speechiness']))  # noqa: E501
        if 'min_tempo' in params:
            query_params.append(('min_tempo', params['min_tempo']))  # noqa: E501
        if 'max_tempo' in params:
            query_params.append(('max_tempo', params['max_tempo']))  # noqa: E501
        if 'target_tempo' in params:
            query_params.append(('target_tempo', params['target_tempo']))  # noqa: E501
        if 'min_time_signature' in params:
            query_params.append(('min_time_signature', params['min_time_signature']))  # noqa: E501
        if 'max_time_signature' in params:
            query_params.append(('max_time_signature', params['max_time_signature']))  # noqa: E501
        if 'target_time_signature' in params:
            query_params.append(('target_time_signature', params['target_time_signature']))  # noqa: E501
        if 'min_valence' in params:
            query_params.append(('min_valence', params['min_valence']))  # noqa: E501
        if 'max_valence' in params:
            query_params.append(('max_valence', params['max_valence']))  # noqa: E501
        if 'target_valence' in params:
            query_params.append(('target_valence', params['target_valence']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/recommendations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecommendationsObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_several_audio_features(self, ids, **kwargs):  # noqa: E501
        """Get Tracks' Audio Features   # noqa: E501

        Get audio features for multiple tracks based on their Spotify IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_several_audio_features(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_several_audio_features_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_several_audio_features_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def get_several_audio_features_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Get Tracks' Audio Features   # noqa: E501

        Get audio features for multiple tracks based on their Spotify IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_several_audio_features_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_several_audio_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `get_several_audio_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/audio-features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_several_tracks(self, ids, **kwargs):  # noqa: E501
        """Get Several Tracks   # noqa: E501

        Get Spotify catalog information for multiple tracks based on their Spotify IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_several_tracks(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param str market:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_several_tracks_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_several_tracks_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def get_several_tracks_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Get Several Tracks   # noqa: E501

        Get Spotify catalog information for multiple tracks based on their Spotify IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_several_tracks_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param str market:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_several_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `get_several_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_track(self, id, **kwargs):  # noqa: E501
        """Get Track   # noqa: E501

        Get Spotify catalog information for a single track identified by its unique Spotify ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_track(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :return: TrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_track_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_track_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_track_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Track   # noqa: E501

        Get Spotify catalog information for a single track identified by its unique Spotify ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_track_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str market:
        :return: TrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_track" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_track`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/tracks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_saved_tracks(self, **kwargs):  # noqa: E501
        """Get User's Saved Tracks   # noqa: E501

        Get a list of the songs saved in the current Spotify user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_saved_tracks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int limit:
        :param int offset:
        :return: PagingSavedTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_saved_tracks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_saved_tracks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_saved_tracks_with_http_info(self, **kwargs):  # noqa: E501
        """Get User's Saved Tracks   # noqa: E501

        Get a list of the songs saved in the current Spotify user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_saved_tracks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int limit:
        :param int offset:
        :return: PagingSavedTrackObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_saved_tracks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'market' in params:
            query_params.append(('market', params['market']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/me/tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagingSavedTrackObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_top_artists_and_tracks(self, type, **kwargs):  # noqa: E501
        """Get User's Top Items   # noqa: E501

        Get the current user's top artists or tracks based on calculated affinity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_top_artists_and_tracks(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param str time_range:
        :param int limit:
        :param int offset:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_top_artists_and_tracks_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_top_artists_and_tracks_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_users_top_artists_and_tracks_with_http_info(self, type, **kwargs):  # noqa: E501
        """Get User's Top Items   # noqa: E501

        Get the current user's top artists or tracks based on calculated affinity.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_top_artists_and_tracks_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param str time_range:
        :param int limit:
        :param int offset:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'time_range', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_top_artists_and_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_users_top_artists_and_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if 'time_range' in params:
            query_params.append(('time_range', params['time_range']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/me/top/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tracks_playlist(self, playlist_id, **kwargs):  # noqa: E501
        """Remove Playlist Items   # noqa: E501

        Remove one or more items from a user's playlist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tracks_playlist(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param PlaylistIdTracksBody2 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tracks_playlist_with_http_info(playlist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tracks_playlist_with_http_info(playlist_id, **kwargs)  # noqa: E501
            return data

    def remove_tracks_playlist_with_http_info(self, playlist_id, **kwargs):  # noqa: E501
        """Remove Playlist Items   # noqa: E501

        Remove one or more items from a user's playlist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tracks_playlist_with_http_info(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param PlaylistIdTracksBody2 body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tracks_playlist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `remove_tracks_playlist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlist_id'] = params['playlist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/playlists/{playlist_id}/tracks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tracks_user(self, ids, **kwargs):  # noqa: E501
        """Remove User's Saved Tracks   # noqa: E501

        Remove one or more tracks from the current user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tracks_user(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tracks_user_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tracks_user_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def remove_tracks_user_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Remove User's Saved Tracks   # noqa: E501

        Remove one or more tracks from the current user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tracks_user_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tracks_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `remove_tracks_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/me/tracks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_or_replace_playlists_tracks(self, playlist_id, **kwargs):  # noqa: E501
        """Update Playlist Items   # noqa: E501

        Either reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_or_replace_playlists_tracks(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param dict(str, object) body:
        :param str uris:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_or_replace_playlists_tracks_with_http_info(playlist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_or_replace_playlists_tracks_with_http_info(playlist_id, **kwargs)  # noqa: E501
            return data

    def reorder_or_replace_playlists_tracks_with_http_info(self, playlist_id, **kwargs):  # noqa: E501
        """Update Playlist Items   # noqa: E501

        Either reorder or replace items in a playlist depending on the request's parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body. To replace items, include `uris` as either a query parameter or in the request's body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can't be applied together in a single request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_or_replace_playlists_tracks_with_http_info(playlist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str playlist_id: (required)
        :param dict(str, object) body:
        :param str uris:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id', 'body', 'uris']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_or_replace_playlists_tracks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id' is set
        if ('playlist_id' not in params or
                params['playlist_id'] is None):
            raise ValueError("Missing the required parameter `playlist_id` when calling `reorder_or_replace_playlists_tracks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'playlist_id' in params:
            path_params['playlist_id'] = params['playlist_id']  # noqa: E501

        query_params = []
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/playlists/{playlist_id}/tracks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_tracks_user(self, ids, **kwargs):  # noqa: E501
        """Save Tracks for Current User   # noqa: E501

        Save one or more tracks to the current user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_tracks_user(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_tracks_user_with_http_info(ids, **kwargs)  # noqa: E501
        else:
            (data) = self.save_tracks_user_with_http_info(ids, **kwargs)  # noqa: E501
            return data

    def save_tracks_user_with_http_info(self, ids, **kwargs):  # noqa: E501
        """Save Tracks for Current User   # noqa: E501

        Save one or more tracks to the current user's 'Your Music' library.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_tracks_user_with_http_info(ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ids: (required)
        :param dict(str, object) body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_tracks_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `save_tracks_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth_2_0']  # noqa: E501

        return self.api_client.call_api(
            '/me/tracks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
